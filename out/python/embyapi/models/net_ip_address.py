# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.7.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetIPAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_family': 'str',
        'scope_id': 'int',
        'is_i_pv6_multicast': 'bool',
        'is_i_pv6_link_local': 'bool',
        'is_i_pv6_site_local': 'bool',
        'is_i_pv6_teredo': 'bool',
        'is_i_pv6_unique_local': 'bool',
        'is_i_pv4_mapped_to_i_pv6': 'bool',
        'address': 'int'
    }

    attribute_map = {
        'address_family': 'AddressFamily',
        'scope_id': 'ScopeId',
        'is_i_pv6_multicast': 'IsIPv6Multicast',
        'is_i_pv6_link_local': 'IsIPv6LinkLocal',
        'is_i_pv6_site_local': 'IsIPv6SiteLocal',
        'is_i_pv6_teredo': 'IsIPv6Teredo',
        'is_i_pv6_unique_local': 'IsIPv6UniqueLocal',
        'is_i_pv4_mapped_to_i_pv6': 'IsIPv4MappedToIPv6',
        'address': 'Address'
    }

    def __init__(self, address_family=None, scope_id=None, is_i_pv6_multicast=None, is_i_pv6_link_local=None, is_i_pv6_site_local=None, is_i_pv6_teredo=None, is_i_pv6_unique_local=None, is_i_pv4_mapped_to_i_pv6=None, address=None):  # noqa: E501
        """NetIPAddress - a model defined in Swagger"""  # noqa: E501
        self._address_family = None
        self._scope_id = None
        self._is_i_pv6_multicast = None
        self._is_i_pv6_link_local = None
        self._is_i_pv6_site_local = None
        self._is_i_pv6_teredo = None
        self._is_i_pv6_unique_local = None
        self._is_i_pv4_mapped_to_i_pv6 = None
        self._address = None
        self.discriminator = None
        if address_family is not None:
            self.address_family = address_family
        if scope_id is not None:
            self.scope_id = scope_id
        if is_i_pv6_multicast is not None:
            self.is_i_pv6_multicast = is_i_pv6_multicast
        if is_i_pv6_link_local is not None:
            self.is_i_pv6_link_local = is_i_pv6_link_local
        if is_i_pv6_site_local is not None:
            self.is_i_pv6_site_local = is_i_pv6_site_local
        if is_i_pv6_teredo is not None:
            self.is_i_pv6_teredo = is_i_pv6_teredo
        if is_i_pv6_unique_local is not None:
            self.is_i_pv6_unique_local = is_i_pv6_unique_local
        if is_i_pv4_mapped_to_i_pv6 is not None:
            self.is_i_pv4_mapped_to_i_pv6 = is_i_pv4_mapped_to_i_pv6
        if address is not None:
            self.address = address

    @property
    def address_family(self):
        """Gets the address_family of this NetIPAddress.  # noqa: E501


        :return: The address_family of this NetIPAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_family

    @address_family.setter
    def address_family(self, address_family):
        """Sets the address_family of this NetIPAddress.


        :param address_family: The address_family of this NetIPAddress.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unspecified", "Unix", "InterNetwork", "ImpLink", "Pup", "Chaos", "NS", "Ipx", "Osi", "Iso", "Ecma", "DataKit", "Ccitt", "Sna", "DecNet", "DataLink", "Lat", "HyperChannel", "AppleTalk", "NetBios", "VoiceView", "FireFox", "Banyan", "Atm", "InterNetworkV6", "Cluster", "Ieee12844", "Irda", "NetworkDesigners", "Max", "Packet", "ControllerAreaNetwork", "Unknown"]  # noqa: E501
        if address_family not in allowed_values:
            raise ValueError(
                "Invalid value for `address_family` ({0}), must be one of {1}"  # noqa: E501
                .format(address_family, allowed_values)
            )

        self._address_family = address_family

    @property
    def scope_id(self):
        """Gets the scope_id of this NetIPAddress.  # noqa: E501


        :return: The scope_id of this NetIPAddress.  # noqa: E501
        :rtype: int
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this NetIPAddress.


        :param scope_id: The scope_id of this NetIPAddress.  # noqa: E501
        :type: int
        """

        self._scope_id = scope_id

    @property
    def is_i_pv6_multicast(self):
        """Gets the is_i_pv6_multicast of this NetIPAddress.  # noqa: E501


        :return: The is_i_pv6_multicast of this NetIPAddress.  # noqa: E501
        :rtype: bool
        """
        return self._is_i_pv6_multicast

    @is_i_pv6_multicast.setter
    def is_i_pv6_multicast(self, is_i_pv6_multicast):
        """Sets the is_i_pv6_multicast of this NetIPAddress.


        :param is_i_pv6_multicast: The is_i_pv6_multicast of this NetIPAddress.  # noqa: E501
        :type: bool
        """

        self._is_i_pv6_multicast = is_i_pv6_multicast

    @property
    def is_i_pv6_link_local(self):
        """Gets the is_i_pv6_link_local of this NetIPAddress.  # noqa: E501


        :return: The is_i_pv6_link_local of this NetIPAddress.  # noqa: E501
        :rtype: bool
        """
        return self._is_i_pv6_link_local

    @is_i_pv6_link_local.setter
    def is_i_pv6_link_local(self, is_i_pv6_link_local):
        """Sets the is_i_pv6_link_local of this NetIPAddress.


        :param is_i_pv6_link_local: The is_i_pv6_link_local of this NetIPAddress.  # noqa: E501
        :type: bool
        """

        self._is_i_pv6_link_local = is_i_pv6_link_local

    @property
    def is_i_pv6_site_local(self):
        """Gets the is_i_pv6_site_local of this NetIPAddress.  # noqa: E501


        :return: The is_i_pv6_site_local of this NetIPAddress.  # noqa: E501
        :rtype: bool
        """
        return self._is_i_pv6_site_local

    @is_i_pv6_site_local.setter
    def is_i_pv6_site_local(self, is_i_pv6_site_local):
        """Sets the is_i_pv6_site_local of this NetIPAddress.


        :param is_i_pv6_site_local: The is_i_pv6_site_local of this NetIPAddress.  # noqa: E501
        :type: bool
        """

        self._is_i_pv6_site_local = is_i_pv6_site_local

    @property
    def is_i_pv6_teredo(self):
        """Gets the is_i_pv6_teredo of this NetIPAddress.  # noqa: E501


        :return: The is_i_pv6_teredo of this NetIPAddress.  # noqa: E501
        :rtype: bool
        """
        return self._is_i_pv6_teredo

    @is_i_pv6_teredo.setter
    def is_i_pv6_teredo(self, is_i_pv6_teredo):
        """Sets the is_i_pv6_teredo of this NetIPAddress.


        :param is_i_pv6_teredo: The is_i_pv6_teredo of this NetIPAddress.  # noqa: E501
        :type: bool
        """

        self._is_i_pv6_teredo = is_i_pv6_teredo

    @property
    def is_i_pv6_unique_local(self):
        """Gets the is_i_pv6_unique_local of this NetIPAddress.  # noqa: E501


        :return: The is_i_pv6_unique_local of this NetIPAddress.  # noqa: E501
        :rtype: bool
        """
        return self._is_i_pv6_unique_local

    @is_i_pv6_unique_local.setter
    def is_i_pv6_unique_local(self, is_i_pv6_unique_local):
        """Sets the is_i_pv6_unique_local of this NetIPAddress.


        :param is_i_pv6_unique_local: The is_i_pv6_unique_local of this NetIPAddress.  # noqa: E501
        :type: bool
        """

        self._is_i_pv6_unique_local = is_i_pv6_unique_local

    @property
    def is_i_pv4_mapped_to_i_pv6(self):
        """Gets the is_i_pv4_mapped_to_i_pv6 of this NetIPAddress.  # noqa: E501


        :return: The is_i_pv4_mapped_to_i_pv6 of this NetIPAddress.  # noqa: E501
        :rtype: bool
        """
        return self._is_i_pv4_mapped_to_i_pv6

    @is_i_pv4_mapped_to_i_pv6.setter
    def is_i_pv4_mapped_to_i_pv6(self, is_i_pv4_mapped_to_i_pv6):
        """Sets the is_i_pv4_mapped_to_i_pv6 of this NetIPAddress.


        :param is_i_pv4_mapped_to_i_pv6: The is_i_pv4_mapped_to_i_pv6 of this NetIPAddress.  # noqa: E501
        :type: bool
        """

        self._is_i_pv4_mapped_to_i_pv6 = is_i_pv4_mapped_to_i_pv6

    @property
    def address(self):
        """Gets the address of this NetIPAddress.  # noqa: E501


        :return: The address of this NetIPAddress.  # noqa: E501
        :rtype: int
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this NetIPAddress.


        :param address: The address of this NetIPAddress.  # noqa: E501
        :type: int
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetIPAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetIPAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
