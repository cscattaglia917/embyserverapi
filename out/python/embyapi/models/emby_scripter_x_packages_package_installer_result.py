# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.7.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmbyScripterXPackagesPackageInstallerResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_id': 'str',
        'package_name': 'str',
        'package_version': 'str',
        'installation_id': 'str',
        'installation_name': 'str',
        'package_description': 'str',
        'install_result': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'package_id': 'packageId',
        'package_name': 'packageName',
        'package_version': 'packageVersion',
        'installation_id': 'installationId',
        'installation_name': 'installationName',
        'package_description': 'packageDescription',
        'install_result': 'installResult',
        'error_message': 'errorMessage'
    }

    def __init__(self, package_id=None, package_name=None, package_version=None, installation_id=None, installation_name=None, package_description=None, install_result=None, error_message=None):  # noqa: E501
        """EmbyScripterXPackagesPackageInstallerResult - a model defined in Swagger"""  # noqa: E501
        self._package_id = None
        self._package_name = None
        self._package_version = None
        self._installation_id = None
        self._installation_name = None
        self._package_description = None
        self._install_result = None
        self._error_message = None
        self.discriminator = None
        if package_id is not None:
            self.package_id = package_id
        if package_name is not None:
            self.package_name = package_name
        if package_version is not None:
            self.package_version = package_version
        if installation_id is not None:
            self.installation_id = installation_id
        if installation_name is not None:
            self.installation_name = installation_name
        if package_description is not None:
            self.package_description = package_description
        if install_result is not None:
            self.install_result = install_result
        if error_message is not None:
            self.error_message = error_message

    @property
    def package_id(self):
        """Gets the package_id of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501


        :return: The package_id of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this EmbyScripterXPackagesPackageInstallerResult.


        :param package_id: The package_id of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :type: str
        """

        self._package_id = package_id

    @property
    def package_name(self):
        """Gets the package_name of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501


        :return: The package_name of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this EmbyScripterXPackagesPackageInstallerResult.


        :param package_name: The package_name of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :type: str
        """

        self._package_name = package_name

    @property
    def package_version(self):
        """Gets the package_version of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501


        :return: The package_version of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """Sets the package_version of this EmbyScripterXPackagesPackageInstallerResult.


        :param package_version: The package_version of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :type: str
        """

        self._package_version = package_version

    @property
    def installation_id(self):
        """Gets the installation_id of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501


        :return: The installation_id of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :rtype: str
        """
        return self._installation_id

    @installation_id.setter
    def installation_id(self, installation_id):
        """Sets the installation_id of this EmbyScripterXPackagesPackageInstallerResult.


        :param installation_id: The installation_id of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :type: str
        """

        self._installation_id = installation_id

    @property
    def installation_name(self):
        """Gets the installation_name of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501


        :return: The installation_name of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :rtype: str
        """
        return self._installation_name

    @installation_name.setter
    def installation_name(self, installation_name):
        """Sets the installation_name of this EmbyScripterXPackagesPackageInstallerResult.


        :param installation_name: The installation_name of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :type: str
        """

        self._installation_name = installation_name

    @property
    def package_description(self):
        """Gets the package_description of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501


        :return: The package_description of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :rtype: str
        """
        return self._package_description

    @package_description.setter
    def package_description(self, package_description):
        """Sets the package_description of this EmbyScripterXPackagesPackageInstallerResult.


        :param package_description: The package_description of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :type: str
        """

        self._package_description = package_description

    @property
    def install_result(self):
        """Gets the install_result of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501


        :return: The install_result of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :rtype: str
        """
        return self._install_result

    @install_result.setter
    def install_result(self, install_result):
        """Sets the install_result of this EmbyScripterXPackagesPackageInstallerResult.


        :param install_result: The install_result of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :type: str
        """
        allowed_values = ["Success", "Failed", "Pending"]  # noqa: E501
        if install_result not in allowed_values:
            raise ValueError(
                "Invalid value for `install_result` ({0}), must be one of {1}"  # noqa: E501
                .format(install_result, allowed_values)
            )

        self._install_result = install_result

    @property
    def error_message(self):
        """Gets the error_message of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501


        :return: The error_message of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this EmbyScripterXPackagesPackageInstallerResult.


        :param error_message: The error_message of this EmbyScripterXPackagesPackageInstallerResult.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmbyScripterXPackagesPackageInstallerResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmbyScripterXPackagesPackageInstallerResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
