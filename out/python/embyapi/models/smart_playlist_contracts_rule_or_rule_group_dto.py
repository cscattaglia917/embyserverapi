# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.7.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmartPlaylistContractsRuleOrRuleGroupDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'kind': 'str',
        'criteria': 'SmartPlaylistContractsRuleCriteriaValueDto',
        'match_mode': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'kind': 'Kind',
        'criteria': 'Criteria',
        'match_mode': 'MatchMode'
    }

    def __init__(self, id=None, kind=None, criteria=None, match_mode=None):  # noqa: E501
        """SmartPlaylistContractsRuleOrRuleGroupDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._kind = None
        self._criteria = None
        self._match_mode = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if kind is not None:
            self.kind = kind
        if criteria is not None:
            self.criteria = criteria
        if match_mode is not None:
            self.match_mode = match_mode

    @property
    def id(self):
        """Gets the id of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501


        :return: The id of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SmartPlaylistContractsRuleOrRuleGroupDto.


        :param id: The id of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501


        :return: The kind of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SmartPlaylistContractsRuleOrRuleGroupDto.


        :param kind: The kind of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def criteria(self):
        """Gets the criteria of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501


        :return: The criteria of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501
        :rtype: SmartPlaylistContractsRuleCriteriaValueDto
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this SmartPlaylistContractsRuleOrRuleGroupDto.


        :param criteria: The criteria of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501
        :type: SmartPlaylistContractsRuleCriteriaValueDto
        """

        self._criteria = criteria

    @property
    def match_mode(self):
        """Gets the match_mode of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501


        :return: The match_mode of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501
        :rtype: str
        """
        return self._match_mode

    @match_mode.setter
    def match_mode(self, match_mode):
        """Sets the match_mode of this SmartPlaylistContractsRuleOrRuleGroupDto.


        :param match_mode: The match_mode of this SmartPlaylistContractsRuleOrRuleGroupDto.  # noqa: E501
        :type: str
        """

        self._match_mode = match_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlaylistContractsRuleOrRuleGroupDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlaylistContractsRuleOrRuleGroupDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
