# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmbyReportsApiModelReportResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rows': 'list[EmbyReportsApiModelReportRow]',
        'headers': 'list[EmbyReportsApiModelReportHeader]',
        'groups': 'list[EmbyReportsApiModelReportGroup]',
        'total_record_count': 'int',
        'is_grouped': 'bool'
    }

    attribute_map = {
        'rows': 'Rows',
        'headers': 'Headers',
        'groups': 'Groups',
        'total_record_count': 'TotalRecordCount',
        'is_grouped': 'IsGrouped'
    }

    def __init__(self, rows=None, headers=None, groups=None, total_record_count=None, is_grouped=None):  # noqa: E501
        """EmbyReportsApiModelReportResult - a model defined in Swagger"""  # noqa: E501
        self._rows = None
        self._headers = None
        self._groups = None
        self._total_record_count = None
        self._is_grouped = None
        self.discriminator = None
        if rows is not None:
            self.rows = rows
        if headers is not None:
            self.headers = headers
        if groups is not None:
            self.groups = groups
        if total_record_count is not None:
            self.total_record_count = total_record_count
        if is_grouped is not None:
            self.is_grouped = is_grouped

    @property
    def rows(self):
        """Gets the rows of this EmbyReportsApiModelReportResult.  # noqa: E501


        :return: The rows of this EmbyReportsApiModelReportResult.  # noqa: E501
        :rtype: list[EmbyReportsApiModelReportRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this EmbyReportsApiModelReportResult.


        :param rows: The rows of this EmbyReportsApiModelReportResult.  # noqa: E501
        :type: list[EmbyReportsApiModelReportRow]
        """

        self._rows = rows

    @property
    def headers(self):
        """Gets the headers of this EmbyReportsApiModelReportResult.  # noqa: E501


        :return: The headers of this EmbyReportsApiModelReportResult.  # noqa: E501
        :rtype: list[EmbyReportsApiModelReportHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this EmbyReportsApiModelReportResult.


        :param headers: The headers of this EmbyReportsApiModelReportResult.  # noqa: E501
        :type: list[EmbyReportsApiModelReportHeader]
        """

        self._headers = headers

    @property
    def groups(self):
        """Gets the groups of this EmbyReportsApiModelReportResult.  # noqa: E501


        :return: The groups of this EmbyReportsApiModelReportResult.  # noqa: E501
        :rtype: list[EmbyReportsApiModelReportGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this EmbyReportsApiModelReportResult.


        :param groups: The groups of this EmbyReportsApiModelReportResult.  # noqa: E501
        :type: list[EmbyReportsApiModelReportGroup]
        """

        self._groups = groups

    @property
    def total_record_count(self):
        """Gets the total_record_count of this EmbyReportsApiModelReportResult.  # noqa: E501


        :return: The total_record_count of this EmbyReportsApiModelReportResult.  # noqa: E501
        :rtype: int
        """
        return self._total_record_count

    @total_record_count.setter
    def total_record_count(self, total_record_count):
        """Sets the total_record_count of this EmbyReportsApiModelReportResult.


        :param total_record_count: The total_record_count of this EmbyReportsApiModelReportResult.  # noqa: E501
        :type: int
        """

        self._total_record_count = total_record_count

    @property
    def is_grouped(self):
        """Gets the is_grouped of this EmbyReportsApiModelReportResult.  # noqa: E501


        :return: The is_grouped of this EmbyReportsApiModelReportResult.  # noqa: E501
        :rtype: bool
        """
        return self._is_grouped

    @is_grouped.setter
    def is_grouped(self, is_grouped):
        """Sets the is_grouped of this EmbyReportsApiModelReportResult.


        :param is_grouped: The is_grouped of this EmbyReportsApiModelReportResult.  # noqa: E501
        :type: bool
        """

        self._is_grouped = is_grouped

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmbyReportsApiModelReportResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmbyReportsApiModelReportResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
