# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NewsNewsItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'link': 'str',
        'description': 'str',
        'description_html': 'str',
        'guid': 'str',
        '_date': 'datetime'
    }

    attribute_map = {
        'title': 'Title',
        'link': 'Link',
        'description': 'Description',
        'description_html': 'DescriptionHtml',
        'guid': 'Guid',
        '_date': 'Date'
    }

    def __init__(self, title=None, link=None, description=None, description_html=None, guid=None, _date=None):  # noqa: E501
        """NewsNewsItem - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._link = None
        self._description = None
        self._description_html = None
        self._guid = None
        self.__date = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if link is not None:
            self.link = link
        if description is not None:
            self.description = description
        if description_html is not None:
            self.description_html = description_html
        if guid is not None:
            self.guid = guid
        if _date is not None:
            self._date = _date

    @property
    def title(self):
        """Gets the title of this NewsNewsItem.  # noqa: E501


        :return: The title of this NewsNewsItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewsNewsItem.


        :param title: The title of this NewsNewsItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def link(self):
        """Gets the link of this NewsNewsItem.  # noqa: E501


        :return: The link of this NewsNewsItem.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this NewsNewsItem.


        :param link: The link of this NewsNewsItem.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def description(self):
        """Gets the description of this NewsNewsItem.  # noqa: E501


        :return: The description of this NewsNewsItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewsNewsItem.


        :param description: The description of this NewsNewsItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_html(self):
        """Gets the description_html of this NewsNewsItem.  # noqa: E501


        :return: The description_html of this NewsNewsItem.  # noqa: E501
        :rtype: str
        """
        return self._description_html

    @description_html.setter
    def description_html(self, description_html):
        """Sets the description_html of this NewsNewsItem.


        :param description_html: The description_html of this NewsNewsItem.  # noqa: E501
        :type: str
        """

        self._description_html = description_html

    @property
    def guid(self):
        """Gets the guid of this NewsNewsItem.  # noqa: E501


        :return: The guid of this NewsNewsItem.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this NewsNewsItem.


        :param guid: The guid of this NewsNewsItem.  # noqa: E501
        :type: str
        """

        self._guid = guid

    @property
    def _date(self):
        """Gets the _date of this NewsNewsItem.  # noqa: E501


        :return: The _date of this NewsNewsItem.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this NewsNewsItem.


        :param _date: The _date of this NewsNewsItem.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewsNewsItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewsNewsItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
