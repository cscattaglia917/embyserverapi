# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.7.14.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'error': 'str',
        'response': 'SmartPlaylistContractsSmartPlaylistDto'
    }

    attribute_map = {
        'success': 'Success',
        'error': 'Error',
        'response': 'Response'
    }

    def __init__(self, success=None, error=None, response=None):  # noqa: E501
        """SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._error = None
        self._response = None
        self.discriminator = None
        if success is not None:
            self.success = success
        if error is not None:
            self.error = error
        if response is not None:
            self.response = response

    @property
    def success(self):
        """Gets the success of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.  # noqa: E501


        :return: The success of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.


        :param success: The success of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def error(self):
        """Gets the error of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.  # noqa: E501


        :return: The error of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.


        :param error: The error of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def response(self):
        """Gets the response of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.  # noqa: E501


        :return: The response of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.  # noqa: E501
        :rtype: SmartPlaylistContractsSmartPlaylistDto
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.


        :param response: The response of this SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto.  # noqa: E501
        :type: SmartPlaylistContractsSmartPlaylistDto
        """

        self._response = response

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlaylistContractsResponseDtoSmartPlaylistContractsSmartPlaylistDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
