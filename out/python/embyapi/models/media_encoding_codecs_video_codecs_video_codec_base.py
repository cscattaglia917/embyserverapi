# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MediaEncodingCodecsVideoCodecsVideoCodecBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'codec_kind': 'str',
        'media_type_name': 'str',
        'video_media_type': 'str',
        'min_width': 'int',
        'max_width': 'int',
        'min_height': 'int',
        'max_height': 'int',
        'width_alignment': 'int',
        'height_alignment': 'int',
        'min_frame_rate': 'int',
        'max_frame_rate': 'int',
        'supported_color_formats': 'list[str]',
        'supported_color_format_strings': 'list[str]',
        'profile_and_level_information': 'list[MediaEncodingCodecsCommonTypesProfileLevelInformation]',
        'id': 'str',
        'direction': 'str',
        'name': 'str',
        'description': 'str',
        'framework_codec': 'str',
        'is_hardware_codec': 'bool',
        'secondary_framework': 'str',
        'secondary_framework_codec': 'str',
        'max_instance_count': 'int',
        'min_bit_rate': 'MediaEncodingCodecsCommonTypesBitRate',
        'max_bit_rate': 'MediaEncodingCodecsCommonTypesBitRate',
        'is_enabled_by_default': 'bool',
        'default_priority': 'int'
    }

    attribute_map = {
        'codec_kind': 'CodecKind',
        'media_type_name': 'MediaTypeName',
        'video_media_type': 'VideoMediaType',
        'min_width': 'MinWidth',
        'max_width': 'MaxWidth',
        'min_height': 'MinHeight',
        'max_height': 'MaxHeight',
        'width_alignment': 'WidthAlignment',
        'height_alignment': 'HeightAlignment',
        'min_frame_rate': 'MinFrameRate',
        'max_frame_rate': 'MaxFrameRate',
        'supported_color_formats': 'SupportedColorFormats',
        'supported_color_format_strings': 'SupportedColorFormatStrings',
        'profile_and_level_information': 'ProfileAndLevelInformation',
        'id': 'Id',
        'direction': 'Direction',
        'name': 'Name',
        'description': 'Description',
        'framework_codec': 'FrameworkCodec',
        'is_hardware_codec': 'IsHardwareCodec',
        'secondary_framework': 'SecondaryFramework',
        'secondary_framework_codec': 'SecondaryFrameworkCodec',
        'max_instance_count': 'MaxInstanceCount',
        'min_bit_rate': 'MinBitRate',
        'max_bit_rate': 'MaxBitRate',
        'is_enabled_by_default': 'IsEnabledByDefault',
        'default_priority': 'DefaultPriority'
    }

    def __init__(self, codec_kind=None, media_type_name=None, video_media_type=None, min_width=None, max_width=None, min_height=None, max_height=None, width_alignment=None, height_alignment=None, min_frame_rate=None, max_frame_rate=None, supported_color_formats=None, supported_color_format_strings=None, profile_and_level_information=None, id=None, direction=None, name=None, description=None, framework_codec=None, is_hardware_codec=None, secondary_framework=None, secondary_framework_codec=None, max_instance_count=None, min_bit_rate=None, max_bit_rate=None, is_enabled_by_default=None, default_priority=None):  # noqa: E501
        """MediaEncodingCodecsVideoCodecsVideoCodecBase - a model defined in Swagger"""  # noqa: E501
        self._codec_kind = None
        self._media_type_name = None
        self._video_media_type = None
        self._min_width = None
        self._max_width = None
        self._min_height = None
        self._max_height = None
        self._width_alignment = None
        self._height_alignment = None
        self._min_frame_rate = None
        self._max_frame_rate = None
        self._supported_color_formats = None
        self._supported_color_format_strings = None
        self._profile_and_level_information = None
        self._id = None
        self._direction = None
        self._name = None
        self._description = None
        self._framework_codec = None
        self._is_hardware_codec = None
        self._secondary_framework = None
        self._secondary_framework_codec = None
        self._max_instance_count = None
        self._min_bit_rate = None
        self._max_bit_rate = None
        self._is_enabled_by_default = None
        self._default_priority = None
        self.discriminator = None
        if codec_kind is not None:
            self.codec_kind = codec_kind
        if media_type_name is not None:
            self.media_type_name = media_type_name
        if video_media_type is not None:
            self.video_media_type = video_media_type
        if min_width is not None:
            self.min_width = min_width
        if max_width is not None:
            self.max_width = max_width
        if min_height is not None:
            self.min_height = min_height
        if max_height is not None:
            self.max_height = max_height
        if width_alignment is not None:
            self.width_alignment = width_alignment
        if height_alignment is not None:
            self.height_alignment = height_alignment
        if min_frame_rate is not None:
            self.min_frame_rate = min_frame_rate
        if max_frame_rate is not None:
            self.max_frame_rate = max_frame_rate
        if supported_color_formats is not None:
            self.supported_color_formats = supported_color_formats
        if supported_color_format_strings is not None:
            self.supported_color_format_strings = supported_color_format_strings
        if profile_and_level_information is not None:
            self.profile_and_level_information = profile_and_level_information
        if id is not None:
            self.id = id
        if direction is not None:
            self.direction = direction
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if framework_codec is not None:
            self.framework_codec = framework_codec
        if is_hardware_codec is not None:
            self.is_hardware_codec = is_hardware_codec
        if secondary_framework is not None:
            self.secondary_framework = secondary_framework
        if secondary_framework_codec is not None:
            self.secondary_framework_codec = secondary_framework_codec
        if max_instance_count is not None:
            self.max_instance_count = max_instance_count
        if min_bit_rate is not None:
            self.min_bit_rate = min_bit_rate
        if max_bit_rate is not None:
            self.max_bit_rate = max_bit_rate
        if is_enabled_by_default is not None:
            self.is_enabled_by_default = is_enabled_by_default
        if default_priority is not None:
            self.default_priority = default_priority

    @property
    def codec_kind(self):
        """Gets the codec_kind of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The codec_kind of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._codec_kind

    @codec_kind.setter
    def codec_kind(self, codec_kind):
        """Sets the codec_kind of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param codec_kind: The codec_kind of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["Audio", "Video", "SubTitles"]  # noqa: E501
        if codec_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `codec_kind` ({0}), must be one of {1}"  # noqa: E501
                .format(codec_kind, allowed_values)
            )

        self._codec_kind = codec_kind

    @property
    def media_type_name(self):
        """Gets the media_type_name of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The media_type_name of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._media_type_name

    @media_type_name.setter
    def media_type_name(self, media_type_name):
        """Sets the media_type_name of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param media_type_name: The media_type_name of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """

        self._media_type_name = media_type_name

    @property
    def video_media_type(self):
        """Gets the video_media_type of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The video_media_type of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._video_media_type

    @video_media_type.setter
    def video_media_type(self, video_media_type):
        """Sets the video_media_type of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param video_media_type: The video_media_type of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "copy", "flv1", "h263", "h263p", "h264", "hevc", "mjpeg", "mpeg1video", "mpeg2video", "mpeg4", "msvideo1", "theora", "vc1image", "vc1", "vp8", "vp9", "wmv1", "wmv2", "wmv3", "_012v", "_4xm", "_8bps", "a64_multi", "a64_multi5", "aasc", "aic", "alias_pix", "amv", "anm", "ansi", "apng", "asv1", "asv2", "aura", "aura2", "av1", "avrn", "avrp", "avs", "avui", "ayuv", "bethsoftvid", "bfi", "binkvideo", "bintext", "bitpacked", "bmp", "bmv_video", "brender_pix", "c93", "cavs", "cdgraphics", "cdxl", "cfhd", "cinepak", "clearvideo", "cljr", "cllc", "cmv", "cpia", "cscd", "cyuv", "daala", "dds", "dfa", "dirac", "dnxhd", "dpx", "dsicinvideo", "dvvideo", "dxa", "dxtory", "dxv", "escape124", "escape130", "exr", "ffv1", "ffvhuff", "fic", "fits", "flashsv", "flashsv2", "flic", "fmvc", "fraps", "frwu", "g2m", "gdv", "gif", "h261", "h263i", "hap", "hnm4video", "hq_hqa", "hqx", "huffyuv", "idcin", "idf", "iff_ilbm", "indeo2", "indeo3", "indeo4", "indeo5", "interplayvideo", "jpeg2000", "jpegls", "jv", "kgv1", "kmvc", "lagarith", "ljpeg", "loco", "m101", "mad", "magicyuv", "mdec", "mimic", "mjpegb", "mmvideo", "motionpixels", "msa1", "mscc", "msmpeg4v1", "msmpeg4v2", "msmpeg4v3", "msrle", "mss1", "mss2", "mszh", "mts2", "mvc1", "mvc2", "mxpeg", "nuv", "paf_video", "pam", "pbm", "pcx", "pgm", "pgmyuv", "pictor", "pixlet", "png", "ppm", "prores", "psd", "ptx", "qdraw", "qpeg", "qtrle", "r10k", "r210", "rawvideo", "rl2", "roq", "rpza", "rscc", "rv10", "rv20", "rv30", "rv40", "sanm", "scpr", "screenpresso", "sgi", "sgirle", "sheervideo", "smackvideo", "smc", "smvjpeg", "snow", "sp5x", "speedhq", "srgc", "sunrast", "svg", "svq1", "svq3", "targa", "targa_y216", "tdsc", "tgq", "tgv", "thp", "tiertexseqvideo", "tiff", "tmv", "tqi", "truemotion1", "truemotion2", "truemotion2rt", "tscc", "tscc2", "txd", "ulti", "utvideo", "v210", "v210x", "v308", "v408", "v410", "vb", "vble", "vcr1", "vixl", "vmdvideo", "vmnc", "vp3", "vp5", "vp6", "vp6a", "vp6f", "vp7", "webp", "wmv3image", "wnv1", "wrapped_avframe", "ws_vqa", "xan_wc3", "xan_wc4", "xbin", "xbm", "xface", "xpm", "xwd", "y41p", "ylc", "yop", "yuv4", "zerocodec", "zlib", "zmbv"]  # noqa: E501
        if video_media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `video_media_type` ({0}), must be one of {1}"  # noqa: E501
                .format(video_media_type, allowed_values)
            )

        self._video_media_type = video_media_type

    @property
    def min_width(self):
        """Gets the min_width of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The min_width of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._min_width

    @min_width.setter
    def min_width(self, min_width):
        """Sets the min_width of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param min_width: The min_width of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._min_width = min_width

    @property
    def max_width(self):
        """Gets the max_width of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The max_width of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._max_width

    @max_width.setter
    def max_width(self, max_width):
        """Sets the max_width of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param max_width: The max_width of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._max_width = max_width

    @property
    def min_height(self):
        """Gets the min_height of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The min_height of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._min_height

    @min_height.setter
    def min_height(self, min_height):
        """Sets the min_height of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param min_height: The min_height of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._min_height = min_height

    @property
    def max_height(self):
        """Gets the max_height of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The max_height of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._max_height

    @max_height.setter
    def max_height(self, max_height):
        """Sets the max_height of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param max_height: The max_height of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._max_height = max_height

    @property
    def width_alignment(self):
        """Gets the width_alignment of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The width_alignment of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._width_alignment

    @width_alignment.setter
    def width_alignment(self, width_alignment):
        """Sets the width_alignment of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param width_alignment: The width_alignment of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._width_alignment = width_alignment

    @property
    def height_alignment(self):
        """Gets the height_alignment of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The height_alignment of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._height_alignment

    @height_alignment.setter
    def height_alignment(self, height_alignment):
        """Sets the height_alignment of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param height_alignment: The height_alignment of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._height_alignment = height_alignment

    @property
    def min_frame_rate(self):
        """Gets the min_frame_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The min_frame_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._min_frame_rate

    @min_frame_rate.setter
    def min_frame_rate(self, min_frame_rate):
        """Sets the min_frame_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param min_frame_rate: The min_frame_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._min_frame_rate = min_frame_rate

    @property
    def max_frame_rate(self):
        """Gets the max_frame_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The max_frame_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._max_frame_rate

    @max_frame_rate.setter
    def max_frame_rate(self, max_frame_rate):
        """Sets the max_frame_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param max_frame_rate: The max_frame_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._max_frame_rate = max_frame_rate

    @property
    def supported_color_formats(self):
        """Gets the supported_color_formats of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The supported_color_formats of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_color_formats

    @supported_color_formats.setter
    def supported_color_formats(self, supported_color_formats):
        """Sets the supported_color_formats of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param supported_color_formats: The supported_color_formats of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Unknown", "yuv420p", "yuyv422", "rgb24", "bgr24", "yuv422p", "yuv444p", "yuv410p", "yuv411p", "gray", "monow", "monob", "pal8", "yuvj420p", "yuvj422p", "yuvj444p", "uyvy422", "uyyvyy411", "bgr8", "bgr4", "bgr4_byte", "rgb8", "rgb4", "rgb4_byte", "nv12", "nv21", "argb", "rgba", "abgr", "bgra", "gray16", "yuv440p", "yuvj440p", "yuva420p", "rgb48", "rgb565", "rgb555", "bgr565", "bgr555", "vaapi_moco", "vaapi_idct", "vaapi_vld", "yuv420p16", "yuv422p16", "yuv444p16", "dxva2_vld", "rgb444", "bgr444", "ya8", "bgr48", "yuv420p9", "yuv420p10", "yuv422p10", "yuv444p9", "yuv444p10", "yuv422p9", "gbrp", "gbrp9", "gbrp10", "gbrp16", "yuva422p", "yuva444p", "yuva420p9", "yuva422p9", "yuva444p9", "yuva420p10", "yuva422p10", "yuva444p10", "yuva420p16", "yuva422p16", "yuva444p16", "vdpau", "xyz12", "nv16", "nv20", "rgba64", "bgra64", "yvyu422", "ya16", "gbrap", "gbrap16", "qsv", "mmal", "d3d11va_vld", "cuda", "_0rgb", "rgb0", "_0bgr", "bgr0", "yuv420p12", "yuv420p14", "yuv422p12", "yuv422p14", "yuv444p12", "yuv444p14", "gbrp12", "gbrp14", "yuvj411p", "bayer_bggr8", "bayer_rggb8", "bayer_gbrg8", "bayer_grbg8", "bayer_bggr16", "bayer_rggb16", "bayer_gbrg16", "bayer_grbg16", "xvmc", "yuv440p10", "yuv440p12", "ayuv64", "videotoolbox_vld", "p010", "gbrap12", "gbrap10", "mediacodec", "gray12", "gray10", "p016", "d3d11", "gray9", "gbrpf32", "gbrapf32", "drm_prime", "opencl"]  # noqa: E501
        if not set(supported_color_formats).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_color_formats` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(supported_color_formats) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_color_formats = supported_color_formats

    @property
    def supported_color_format_strings(self):
        """Gets the supported_color_format_strings of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The supported_color_format_strings of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_color_format_strings

    @supported_color_format_strings.setter
    def supported_color_format_strings(self, supported_color_format_strings):
        """Sets the supported_color_format_strings of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param supported_color_format_strings: The supported_color_format_strings of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: list[str]
        """

        self._supported_color_format_strings = supported_color_format_strings

    @property
    def profile_and_level_information(self):
        """Gets the profile_and_level_information of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The profile_and_level_information of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: list[MediaEncodingCodecsCommonTypesProfileLevelInformation]
        """
        return self._profile_and_level_information

    @profile_and_level_information.setter
    def profile_and_level_information(self, profile_and_level_information):
        """Sets the profile_and_level_information of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param profile_and_level_information: The profile_and_level_information of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: list[MediaEncodingCodecsCommonTypesProfileLevelInformation]
        """

        self._profile_and_level_information = profile_and_level_information

    @property
    def id(self):
        """Gets the id of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The id of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param id: The id of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def direction(self):
        """Gets the direction of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The direction of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param direction: The direction of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["Encoder", "Decoder"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def name(self):
        """Gets the name of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The name of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param name: The name of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The description of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param description: The description of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def framework_codec(self):
        """Gets the framework_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The framework_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._framework_codec

    @framework_codec.setter
    def framework_codec(self, framework_codec):
        """Sets the framework_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param framework_codec: The framework_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """

        self._framework_codec = framework_codec

    @property
    def is_hardware_codec(self):
        """Gets the is_hardware_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The is_hardware_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: bool
        """
        return self._is_hardware_codec

    @is_hardware_codec.setter
    def is_hardware_codec(self, is_hardware_codec):
        """Sets the is_hardware_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param is_hardware_codec: The is_hardware_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: bool
        """

        self._is_hardware_codec = is_hardware_codec

    @property
    def secondary_framework(self):
        """Gets the secondary_framework of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The secondary_framework of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._secondary_framework

    @secondary_framework.setter
    def secondary_framework(self, secondary_framework):
        """Sets the secondary_framework of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param secondary_framework: The secondary_framework of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "None", "AmdAmf", "MediaCodec", "NvEncDec", "OpenMax", "QuickSync", "VaApi", "V4L2", "DxVa", "D3d11va", "VideoToolbox"]  # noqa: E501
        if secondary_framework not in allowed_values:
            raise ValueError(
                "Invalid value for `secondary_framework` ({0}), must be one of {1}"  # noqa: E501
                .format(secondary_framework, allowed_values)
            )

        self._secondary_framework = secondary_framework

    @property
    def secondary_framework_codec(self):
        """Gets the secondary_framework_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The secondary_framework_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: str
        """
        return self._secondary_framework_codec

    @secondary_framework_codec.setter
    def secondary_framework_codec(self, secondary_framework_codec):
        """Sets the secondary_framework_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param secondary_framework_codec: The secondary_framework_codec of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: str
        """

        self._secondary_framework_codec = secondary_framework_codec

    @property
    def max_instance_count(self):
        """Gets the max_instance_count of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The max_instance_count of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._max_instance_count

    @max_instance_count.setter
    def max_instance_count(self, max_instance_count):
        """Sets the max_instance_count of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param max_instance_count: The max_instance_count of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._max_instance_count = max_instance_count

    @property
    def min_bit_rate(self):
        """Gets the min_bit_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The min_bit_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: MediaEncodingCodecsCommonTypesBitRate
        """
        return self._min_bit_rate

    @min_bit_rate.setter
    def min_bit_rate(self, min_bit_rate):
        """Sets the min_bit_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param min_bit_rate: The min_bit_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: MediaEncodingCodecsCommonTypesBitRate
        """

        self._min_bit_rate = min_bit_rate

    @property
    def max_bit_rate(self):
        """Gets the max_bit_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The max_bit_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: MediaEncodingCodecsCommonTypesBitRate
        """
        return self._max_bit_rate

    @max_bit_rate.setter
    def max_bit_rate(self, max_bit_rate):
        """Sets the max_bit_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param max_bit_rate: The max_bit_rate of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: MediaEncodingCodecsCommonTypesBitRate
        """

        self._max_bit_rate = max_bit_rate

    @property
    def is_enabled_by_default(self):
        """Gets the is_enabled_by_default of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The is_enabled_by_default of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled_by_default

    @is_enabled_by_default.setter
    def is_enabled_by_default(self, is_enabled_by_default):
        """Sets the is_enabled_by_default of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param is_enabled_by_default: The is_enabled_by_default of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: bool
        """

        self._is_enabled_by_default = is_enabled_by_default

    @property
    def default_priority(self):
        """Gets the default_priority of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501


        :return: The default_priority of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :rtype: int
        """
        return self._default_priority

    @default_priority.setter
    def default_priority(self, default_priority):
        """Sets the default_priority of this MediaEncodingCodecsVideoCodecsVideoCodecBase.


        :param default_priority: The default_priority of this MediaEncodingCodecsVideoCodecsVideoCodecBase.  # noqa: E501
        :type: int
        """

        self._default_priority = default_priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MediaEncodingCodecsVideoCodecsVideoCodecBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaEncodingCodecsVideoCodecsVideoCodecBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
