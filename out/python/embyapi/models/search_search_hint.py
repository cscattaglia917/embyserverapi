# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchSearchHint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'int',
        'id': 'int',
        'name': 'str',
        'matched_term': 'str',
        'index_number': 'int',
        'production_year': 'int',
        'parent_index_number': 'int',
        'primary_image_tag': 'str',
        'thumb_image_tag': 'str',
        'thumb_image_item_id': 'str',
        'backdrop_image_tag': 'str',
        'backdrop_image_item_id': 'str',
        'type': 'str',
        'is_folder': 'bool',
        'run_time_ticks': 'int',
        'media_type': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'series': 'str',
        'status': 'str',
        'album': 'str',
        'album_id': 'int',
        'album_artist': 'str',
        'artists': 'list[str]',
        'song_count': 'int',
        'episode_count': 'int',
        'channel_name': 'str',
        'primary_image_aspect_ratio': 'float'
    }

    attribute_map = {
        'item_id': 'ItemId',
        'id': 'Id',
        'name': 'Name',
        'matched_term': 'MatchedTerm',
        'index_number': 'IndexNumber',
        'production_year': 'ProductionYear',
        'parent_index_number': 'ParentIndexNumber',
        'primary_image_tag': 'PrimaryImageTag',
        'thumb_image_tag': 'ThumbImageTag',
        'thumb_image_item_id': 'ThumbImageItemId',
        'backdrop_image_tag': 'BackdropImageTag',
        'backdrop_image_item_id': 'BackdropImageItemId',
        'type': 'Type',
        'is_folder': 'IsFolder',
        'run_time_ticks': 'RunTimeTicks',
        'media_type': 'MediaType',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'series': 'Series',
        'status': 'Status',
        'album': 'Album',
        'album_id': 'AlbumId',
        'album_artist': 'AlbumArtist',
        'artists': 'Artists',
        'song_count': 'SongCount',
        'episode_count': 'EpisodeCount',
        'channel_name': 'ChannelName',
        'primary_image_aspect_ratio': 'PrimaryImageAspectRatio'
    }

    def __init__(self, item_id=None, id=None, name=None, matched_term=None, index_number=None, production_year=None, parent_index_number=None, primary_image_tag=None, thumb_image_tag=None, thumb_image_item_id=None, backdrop_image_tag=None, backdrop_image_item_id=None, type=None, is_folder=None, run_time_ticks=None, media_type=None, start_date=None, end_date=None, series=None, status=None, album=None, album_id=None, album_artist=None, artists=None, song_count=None, episode_count=None, channel_name=None, primary_image_aspect_ratio=None):  # noqa: E501
        """SearchSearchHint - a model defined in Swagger"""  # noqa: E501
        self._item_id = None
        self._id = None
        self._name = None
        self._matched_term = None
        self._index_number = None
        self._production_year = None
        self._parent_index_number = None
        self._primary_image_tag = None
        self._thumb_image_tag = None
        self._thumb_image_item_id = None
        self._backdrop_image_tag = None
        self._backdrop_image_item_id = None
        self._type = None
        self._is_folder = None
        self._run_time_ticks = None
        self._media_type = None
        self._start_date = None
        self._end_date = None
        self._series = None
        self._status = None
        self._album = None
        self._album_id = None
        self._album_artist = None
        self._artists = None
        self._song_count = None
        self._episode_count = None
        self._channel_name = None
        self._primary_image_aspect_ratio = None
        self.discriminator = None
        if item_id is not None:
            self.item_id = item_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if matched_term is not None:
            self.matched_term = matched_term
        if index_number is not None:
            self.index_number = index_number
        if production_year is not None:
            self.production_year = production_year
        if parent_index_number is not None:
            self.parent_index_number = parent_index_number
        if primary_image_tag is not None:
            self.primary_image_tag = primary_image_tag
        if thumb_image_tag is not None:
            self.thumb_image_tag = thumb_image_tag
        if thumb_image_item_id is not None:
            self.thumb_image_item_id = thumb_image_item_id
        if backdrop_image_tag is not None:
            self.backdrop_image_tag = backdrop_image_tag
        if backdrop_image_item_id is not None:
            self.backdrop_image_item_id = backdrop_image_item_id
        if type is not None:
            self.type = type
        if is_folder is not None:
            self.is_folder = is_folder
        if run_time_ticks is not None:
            self.run_time_ticks = run_time_ticks
        if media_type is not None:
            self.media_type = media_type
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if series is not None:
            self.series = series
        if status is not None:
            self.status = status
        if album is not None:
            self.album = album
        if album_id is not None:
            self.album_id = album_id
        if album_artist is not None:
            self.album_artist = album_artist
        if artists is not None:
            self.artists = artists
        if song_count is not None:
            self.song_count = song_count
        if episode_count is not None:
            self.episode_count = episode_count
        if channel_name is not None:
            self.channel_name = channel_name
        if primary_image_aspect_ratio is not None:
            self.primary_image_aspect_ratio = primary_image_aspect_ratio

    @property
    def item_id(self):
        """Gets the item_id of this SearchSearchHint.  # noqa: E501


        :return: The item_id of this SearchSearchHint.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this SearchSearchHint.


        :param item_id: The item_id of this SearchSearchHint.  # noqa: E501
        :type: int
        """

        self._item_id = item_id

    @property
    def id(self):
        """Gets the id of this SearchSearchHint.  # noqa: E501


        :return: The id of this SearchSearchHint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchSearchHint.


        :param id: The id of this SearchSearchHint.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SearchSearchHint.  # noqa: E501


        :return: The name of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchSearchHint.


        :param name: The name of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def matched_term(self):
        """Gets the matched_term of this SearchSearchHint.  # noqa: E501


        :return: The matched_term of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._matched_term

    @matched_term.setter
    def matched_term(self, matched_term):
        """Sets the matched_term of this SearchSearchHint.


        :param matched_term: The matched_term of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._matched_term = matched_term

    @property
    def index_number(self):
        """Gets the index_number of this SearchSearchHint.  # noqa: E501


        :return: The index_number of this SearchSearchHint.  # noqa: E501
        :rtype: int
        """
        return self._index_number

    @index_number.setter
    def index_number(self, index_number):
        """Sets the index_number of this SearchSearchHint.


        :param index_number: The index_number of this SearchSearchHint.  # noqa: E501
        :type: int
        """

        self._index_number = index_number

    @property
    def production_year(self):
        """Gets the production_year of this SearchSearchHint.  # noqa: E501


        :return: The production_year of this SearchSearchHint.  # noqa: E501
        :rtype: int
        """
        return self._production_year

    @production_year.setter
    def production_year(self, production_year):
        """Sets the production_year of this SearchSearchHint.


        :param production_year: The production_year of this SearchSearchHint.  # noqa: E501
        :type: int
        """

        self._production_year = production_year

    @property
    def parent_index_number(self):
        """Gets the parent_index_number of this SearchSearchHint.  # noqa: E501


        :return: The parent_index_number of this SearchSearchHint.  # noqa: E501
        :rtype: int
        """
        return self._parent_index_number

    @parent_index_number.setter
    def parent_index_number(self, parent_index_number):
        """Sets the parent_index_number of this SearchSearchHint.


        :param parent_index_number: The parent_index_number of this SearchSearchHint.  # noqa: E501
        :type: int
        """

        self._parent_index_number = parent_index_number

    @property
    def primary_image_tag(self):
        """Gets the primary_image_tag of this SearchSearchHint.  # noqa: E501


        :return: The primary_image_tag of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._primary_image_tag

    @primary_image_tag.setter
    def primary_image_tag(self, primary_image_tag):
        """Sets the primary_image_tag of this SearchSearchHint.


        :param primary_image_tag: The primary_image_tag of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._primary_image_tag = primary_image_tag

    @property
    def thumb_image_tag(self):
        """Gets the thumb_image_tag of this SearchSearchHint.  # noqa: E501


        :return: The thumb_image_tag of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._thumb_image_tag

    @thumb_image_tag.setter
    def thumb_image_tag(self, thumb_image_tag):
        """Sets the thumb_image_tag of this SearchSearchHint.


        :param thumb_image_tag: The thumb_image_tag of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._thumb_image_tag = thumb_image_tag

    @property
    def thumb_image_item_id(self):
        """Gets the thumb_image_item_id of this SearchSearchHint.  # noqa: E501


        :return: The thumb_image_item_id of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._thumb_image_item_id

    @thumb_image_item_id.setter
    def thumb_image_item_id(self, thumb_image_item_id):
        """Sets the thumb_image_item_id of this SearchSearchHint.


        :param thumb_image_item_id: The thumb_image_item_id of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._thumb_image_item_id = thumb_image_item_id

    @property
    def backdrop_image_tag(self):
        """Gets the backdrop_image_tag of this SearchSearchHint.  # noqa: E501


        :return: The backdrop_image_tag of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._backdrop_image_tag

    @backdrop_image_tag.setter
    def backdrop_image_tag(self, backdrop_image_tag):
        """Sets the backdrop_image_tag of this SearchSearchHint.


        :param backdrop_image_tag: The backdrop_image_tag of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._backdrop_image_tag = backdrop_image_tag

    @property
    def backdrop_image_item_id(self):
        """Gets the backdrop_image_item_id of this SearchSearchHint.  # noqa: E501


        :return: The backdrop_image_item_id of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._backdrop_image_item_id

    @backdrop_image_item_id.setter
    def backdrop_image_item_id(self, backdrop_image_item_id):
        """Sets the backdrop_image_item_id of this SearchSearchHint.


        :param backdrop_image_item_id: The backdrop_image_item_id of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._backdrop_image_item_id = backdrop_image_item_id

    @property
    def type(self):
        """Gets the type of this SearchSearchHint.  # noqa: E501


        :return: The type of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchSearchHint.


        :param type: The type of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def is_folder(self):
        """Gets the is_folder of this SearchSearchHint.  # noqa: E501


        :return: The is_folder of this SearchSearchHint.  # noqa: E501
        :rtype: bool
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder):
        """Sets the is_folder of this SearchSearchHint.


        :param is_folder: The is_folder of this SearchSearchHint.  # noqa: E501
        :type: bool
        """

        self._is_folder = is_folder

    @property
    def run_time_ticks(self):
        """Gets the run_time_ticks of this SearchSearchHint.  # noqa: E501


        :return: The run_time_ticks of this SearchSearchHint.  # noqa: E501
        :rtype: int
        """
        return self._run_time_ticks

    @run_time_ticks.setter
    def run_time_ticks(self, run_time_ticks):
        """Sets the run_time_ticks of this SearchSearchHint.


        :param run_time_ticks: The run_time_ticks of this SearchSearchHint.  # noqa: E501
        :type: int
        """

        self._run_time_ticks = run_time_ticks

    @property
    def media_type(self):
        """Gets the media_type of this SearchSearchHint.  # noqa: E501


        :return: The media_type of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this SearchSearchHint.


        :param media_type: The media_type of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def start_date(self):
        """Gets the start_date of this SearchSearchHint.  # noqa: E501


        :return: The start_date of this SearchSearchHint.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SearchSearchHint.


        :param start_date: The start_date of this SearchSearchHint.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this SearchSearchHint.  # noqa: E501


        :return: The end_date of this SearchSearchHint.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SearchSearchHint.


        :param end_date: The end_date of this SearchSearchHint.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def series(self):
        """Gets the series of this SearchSearchHint.  # noqa: E501


        :return: The series of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this SearchSearchHint.


        :param series: The series of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._series = series

    @property
    def status(self):
        """Gets the status of this SearchSearchHint.  # noqa: E501


        :return: The status of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SearchSearchHint.


        :param status: The status of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def album(self):
        """Gets the album of this SearchSearchHint.  # noqa: E501


        :return: The album of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._album

    @album.setter
    def album(self, album):
        """Sets the album of this SearchSearchHint.


        :param album: The album of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._album = album

    @property
    def album_id(self):
        """Gets the album_id of this SearchSearchHint.  # noqa: E501


        :return: The album_id of this SearchSearchHint.  # noqa: E501
        :rtype: int
        """
        return self._album_id

    @album_id.setter
    def album_id(self, album_id):
        """Sets the album_id of this SearchSearchHint.


        :param album_id: The album_id of this SearchSearchHint.  # noqa: E501
        :type: int
        """

        self._album_id = album_id

    @property
    def album_artist(self):
        """Gets the album_artist of this SearchSearchHint.  # noqa: E501


        :return: The album_artist of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._album_artist

    @album_artist.setter
    def album_artist(self, album_artist):
        """Sets the album_artist of this SearchSearchHint.


        :param album_artist: The album_artist of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._album_artist = album_artist

    @property
    def artists(self):
        """Gets the artists of this SearchSearchHint.  # noqa: E501


        :return: The artists of this SearchSearchHint.  # noqa: E501
        :rtype: list[str]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this SearchSearchHint.


        :param artists: The artists of this SearchSearchHint.  # noqa: E501
        :type: list[str]
        """

        self._artists = artists

    @property
    def song_count(self):
        """Gets the song_count of this SearchSearchHint.  # noqa: E501


        :return: The song_count of this SearchSearchHint.  # noqa: E501
        :rtype: int
        """
        return self._song_count

    @song_count.setter
    def song_count(self, song_count):
        """Sets the song_count of this SearchSearchHint.


        :param song_count: The song_count of this SearchSearchHint.  # noqa: E501
        :type: int
        """

        self._song_count = song_count

    @property
    def episode_count(self):
        """Gets the episode_count of this SearchSearchHint.  # noqa: E501


        :return: The episode_count of this SearchSearchHint.  # noqa: E501
        :rtype: int
        """
        return self._episode_count

    @episode_count.setter
    def episode_count(self, episode_count):
        """Sets the episode_count of this SearchSearchHint.


        :param episode_count: The episode_count of this SearchSearchHint.  # noqa: E501
        :type: int
        """

        self._episode_count = episode_count

    @property
    def channel_name(self):
        """Gets the channel_name of this SearchSearchHint.  # noqa: E501


        :return: The channel_name of this SearchSearchHint.  # noqa: E501
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name):
        """Sets the channel_name of this SearchSearchHint.


        :param channel_name: The channel_name of this SearchSearchHint.  # noqa: E501
        :type: str
        """

        self._channel_name = channel_name

    @property
    def primary_image_aspect_ratio(self):
        """Gets the primary_image_aspect_ratio of this SearchSearchHint.  # noqa: E501


        :return: The primary_image_aspect_ratio of this SearchSearchHint.  # noqa: E501
        :rtype: float
        """
        return self._primary_image_aspect_ratio

    @primary_image_aspect_ratio.setter
    def primary_image_aspect_ratio(self, primary_image_aspect_ratio):
        """Sets the primary_image_aspect_ratio of this SearchSearchHint.


        :param primary_image_aspect_ratio: The primary_image_aspect_ratio of this SearchSearchHint.  # noqa: E501
        :type: float
        """

        self._primary_image_aspect_ratio = primary_image_aspect_ratio

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchSearchHint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchSearchHint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
