# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebDashboardApiConfigurationPageInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'enable_in_main_menu': 'bool',
        'menu_section': 'str',
        'menu_icon': 'str',
        'display_name': 'str',
        'configuration_page_type': 'str',
        'plugin_id': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'enable_in_main_menu': 'EnableInMainMenu',
        'menu_section': 'MenuSection',
        'menu_icon': 'MenuIcon',
        'display_name': 'DisplayName',
        'configuration_page_type': 'ConfigurationPageType',
        'plugin_id': 'PluginId'
    }

    def __init__(self, name=None, enable_in_main_menu=None, menu_section=None, menu_icon=None, display_name=None, configuration_page_type=None, plugin_id=None):  # noqa: E501
        """WebDashboardApiConfigurationPageInfo - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._enable_in_main_menu = None
        self._menu_section = None
        self._menu_icon = None
        self._display_name = None
        self._configuration_page_type = None
        self._plugin_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if enable_in_main_menu is not None:
            self.enable_in_main_menu = enable_in_main_menu
        if menu_section is not None:
            self.menu_section = menu_section
        if menu_icon is not None:
            self.menu_icon = menu_icon
        if display_name is not None:
            self.display_name = display_name
        if configuration_page_type is not None:
            self.configuration_page_type = configuration_page_type
        if plugin_id is not None:
            self.plugin_id = plugin_id

    @property
    def name(self):
        """Gets the name of this WebDashboardApiConfigurationPageInfo.  # noqa: E501


        :return: The name of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebDashboardApiConfigurationPageInfo.


        :param name: The name of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def enable_in_main_menu(self):
        """Gets the enable_in_main_menu of this WebDashboardApiConfigurationPageInfo.  # noqa: E501


        :return: The enable_in_main_menu of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :rtype: bool
        """
        return self._enable_in_main_menu

    @enable_in_main_menu.setter
    def enable_in_main_menu(self, enable_in_main_menu):
        """Sets the enable_in_main_menu of this WebDashboardApiConfigurationPageInfo.


        :param enable_in_main_menu: The enable_in_main_menu of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :type: bool
        """

        self._enable_in_main_menu = enable_in_main_menu

    @property
    def menu_section(self):
        """Gets the menu_section of this WebDashboardApiConfigurationPageInfo.  # noqa: E501


        :return: The menu_section of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._menu_section

    @menu_section.setter
    def menu_section(self, menu_section):
        """Sets the menu_section of this WebDashboardApiConfigurationPageInfo.


        :param menu_section: The menu_section of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :type: str
        """

        self._menu_section = menu_section

    @property
    def menu_icon(self):
        """Gets the menu_icon of this WebDashboardApiConfigurationPageInfo.  # noqa: E501


        :return: The menu_icon of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._menu_icon

    @menu_icon.setter
    def menu_icon(self, menu_icon):
        """Sets the menu_icon of this WebDashboardApiConfigurationPageInfo.


        :param menu_icon: The menu_icon of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :type: str
        """

        self._menu_icon = menu_icon

    @property
    def display_name(self):
        """Gets the display_name of this WebDashboardApiConfigurationPageInfo.  # noqa: E501


        :return: The display_name of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WebDashboardApiConfigurationPageInfo.


        :param display_name: The display_name of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def configuration_page_type(self):
        """Gets the configuration_page_type of this WebDashboardApiConfigurationPageInfo.  # noqa: E501


        :return: The configuration_page_type of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._configuration_page_type

    @configuration_page_type.setter
    def configuration_page_type(self, configuration_page_type):
        """Sets the configuration_page_type of this WebDashboardApiConfigurationPageInfo.


        :param configuration_page_type: The configuration_page_type of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["PluginConfiguration", "None"]  # noqa: E501
        if configuration_page_type not in allowed_values:
            raise ValueError(
                "Invalid value for `configuration_page_type` ({0}), must be one of {1}"  # noqa: E501
                .format(configuration_page_type, allowed_values)
            )

        self._configuration_page_type = configuration_page_type

    @property
    def plugin_id(self):
        """Gets the plugin_id of this WebDashboardApiConfigurationPageInfo.  # noqa: E501


        :return: The plugin_id of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :rtype: str
        """
        return self._plugin_id

    @plugin_id.setter
    def plugin_id(self, plugin_id):
        """Sets the plugin_id of this WebDashboardApiConfigurationPageInfo.


        :param plugin_id: The plugin_id of this WebDashboardApiConfigurationPageInfo.  # noqa: E501
        :type: str
        """

        self._plugin_id = plugin_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebDashboardApiConfigurationPageInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebDashboardApiConfigurationPageInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
