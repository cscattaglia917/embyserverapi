# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QueryFiltersLegacy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'genres': 'list[str]',
        'tags': 'list[str]',
        'official_ratings': 'list[str]',
        'years': 'list[int]'
    }

    attribute_map = {
        'genres': 'Genres',
        'tags': 'Tags',
        'official_ratings': 'OfficialRatings',
        'years': 'Years'
    }

    def __init__(self, genres=None, tags=None, official_ratings=None, years=None):  # noqa: E501
        """QueryFiltersLegacy - a model defined in Swagger"""  # noqa: E501
        self._genres = None
        self._tags = None
        self._official_ratings = None
        self._years = None
        self.discriminator = None
        if genres is not None:
            self.genres = genres
        if tags is not None:
            self.tags = tags
        if official_ratings is not None:
            self.official_ratings = official_ratings
        if years is not None:
            self.years = years

    @property
    def genres(self):
        """Gets the genres of this QueryFiltersLegacy.  # noqa: E501


        :return: The genres of this QueryFiltersLegacy.  # noqa: E501
        :rtype: list[str]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this QueryFiltersLegacy.


        :param genres: The genres of this QueryFiltersLegacy.  # noqa: E501
        :type: list[str]
        """

        self._genres = genres

    @property
    def tags(self):
        """Gets the tags of this QueryFiltersLegacy.  # noqa: E501


        :return: The tags of this QueryFiltersLegacy.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this QueryFiltersLegacy.


        :param tags: The tags of this QueryFiltersLegacy.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def official_ratings(self):
        """Gets the official_ratings of this QueryFiltersLegacy.  # noqa: E501


        :return: The official_ratings of this QueryFiltersLegacy.  # noqa: E501
        :rtype: list[str]
        """
        return self._official_ratings

    @official_ratings.setter
    def official_ratings(self, official_ratings):
        """Sets the official_ratings of this QueryFiltersLegacy.


        :param official_ratings: The official_ratings of this QueryFiltersLegacy.  # noqa: E501
        :type: list[str]
        """

        self._official_ratings = official_ratings

    @property
    def years(self):
        """Gets the years of this QueryFiltersLegacy.  # noqa: E501


        :return: The years of this QueryFiltersLegacy.  # noqa: E501
        :rtype: list[int]
        """
        return self._years

    @years.setter
    def years(self, years):
        """Sets the years of this QueryFiltersLegacy.


        :param years: The years of this QueryFiltersLegacy.  # noqa: E501
        :type: list[int]
        """

        self._years = years

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QueryFiltersLegacy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QueryFiltersLegacy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
