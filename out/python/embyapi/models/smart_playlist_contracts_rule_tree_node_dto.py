# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.7.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmartPlaylistContractsRuleTreeNodeDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_root': 'bool',
        'is_expanded': 'bool',
        'level': 'int',
        'children': 'list[str]',
        'data': 'SmartPlaylistContractsRuleOrRuleGroupDto'
    }

    attribute_map = {
        'id': 'Id',
        'is_root': 'IsRoot',
        'is_expanded': 'IsExpanded',
        'level': 'Level',
        'children': 'Children',
        'data': 'Data'
    }

    def __init__(self, id=None, is_root=None, is_expanded=None, level=None, children=None, data=None):  # noqa: E501
        """SmartPlaylistContractsRuleTreeNodeDto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_root = None
        self._is_expanded = None
        self._level = None
        self._children = None
        self._data = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_root is not None:
            self.is_root = is_root
        if is_expanded is not None:
            self.is_expanded = is_expanded
        if level is not None:
            self.level = level
        if children is not None:
            self.children = children
        if data is not None:
            self.data = data

    @property
    def id(self):
        """Gets the id of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501


        :return: The id of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SmartPlaylistContractsRuleTreeNodeDto.


        :param id: The id of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_root(self):
        """Gets the is_root of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501


        :return: The is_root of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_root

    @is_root.setter
    def is_root(self, is_root):
        """Sets the is_root of this SmartPlaylistContractsRuleTreeNodeDto.


        :param is_root: The is_root of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :type: bool
        """

        self._is_root = is_root

    @property
    def is_expanded(self):
        """Gets the is_expanded of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501


        :return: The is_expanded of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_expanded

    @is_expanded.setter
    def is_expanded(self, is_expanded):
        """Sets the is_expanded of this SmartPlaylistContractsRuleTreeNodeDto.


        :param is_expanded: The is_expanded of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :type: bool
        """

        self._is_expanded = is_expanded

    @property
    def level(self):
        """Gets the level of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501


        :return: The level of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SmartPlaylistContractsRuleTreeNodeDto.


        :param level: The level of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :type: int
        """

        self._level = level

    @property
    def children(self):
        """Gets the children of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501


        :return: The children of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this SmartPlaylistContractsRuleTreeNodeDto.


        :param children: The children of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :type: list[str]
        """

        self._children = children

    @property
    def data(self):
        """Gets the data of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501


        :return: The data of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :rtype: SmartPlaylistContractsRuleOrRuleGroupDto
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SmartPlaylistContractsRuleTreeNodeDto.


        :param data: The data of this SmartPlaylistContractsRuleTreeNodeDto.  # noqa: E501
        :type: SmartPlaylistContractsRuleOrRuleGroupDto
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlaylistContractsRuleTreeNodeDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlaylistContractsRuleTreeNodeDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
