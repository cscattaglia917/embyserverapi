# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigurationLibraryOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable_archive_media_files': 'bool',
        'enable_photos': 'bool',
        'enable_realtime_monitor': 'bool',
        'enable_chapter_image_extraction': 'bool',
        'extract_chapter_images_during_library_scan': 'bool',
        'download_images_in_advance': 'bool',
        'path_infos': 'list[ConfigurationMediaPathInfo]',
        'save_local_metadata': 'bool',
        'save_local_thumbnail_sets': 'bool',
        'import_missing_episodes': 'bool',
        'enable_automatic_series_grouping': 'bool',
        'enable_embedded_titles': 'bool',
        'enable_audio_resume': 'bool',
        'automatic_refresh_interval_days': 'int',
        'preferred_metadata_language': 'str',
        'content_type': 'str',
        'metadata_country_code': 'str',
        'season_zero_display_name': 'str',
        'metadata_savers': 'list[str]',
        'disabled_local_metadata_readers': 'list[str]',
        'local_metadata_reader_order': 'list[str]',
        'disabled_subtitle_fetchers': 'list[str]',
        'subtitle_fetcher_order': 'list[str]',
        'skip_subtitles_if_embedded_subtitles_present': 'bool',
        'skip_subtitles_if_audio_track_matches': 'bool',
        'subtitle_download_languages': 'list[str]',
        'require_perfect_subtitle_match': 'bool',
        'save_subtitles_with_media': 'bool',
        'forced_subtitles_only': 'bool',
        'type_options': 'list[ConfigurationTypeOptions]',
        'collapse_single_item_folders': 'bool',
        'min_resume_pct': 'int',
        'max_resume_pct': 'int',
        'min_resume_duration_seconds': 'int',
        'thumbnail_images_interval_seconds': 'int'
    }

    attribute_map = {
        'enable_archive_media_files': 'EnableArchiveMediaFiles',
        'enable_photos': 'EnablePhotos',
        'enable_realtime_monitor': 'EnableRealtimeMonitor',
        'enable_chapter_image_extraction': 'EnableChapterImageExtraction',
        'extract_chapter_images_during_library_scan': 'ExtractChapterImagesDuringLibraryScan',
        'download_images_in_advance': 'DownloadImagesInAdvance',
        'path_infos': 'PathInfos',
        'save_local_metadata': 'SaveLocalMetadata',
        'save_local_thumbnail_sets': 'SaveLocalThumbnailSets',
        'import_missing_episodes': 'ImportMissingEpisodes',
        'enable_automatic_series_grouping': 'EnableAutomaticSeriesGrouping',
        'enable_embedded_titles': 'EnableEmbeddedTitles',
        'enable_audio_resume': 'EnableAudioResume',
        'automatic_refresh_interval_days': 'AutomaticRefreshIntervalDays',
        'preferred_metadata_language': 'PreferredMetadataLanguage',
        'content_type': 'ContentType',
        'metadata_country_code': 'MetadataCountryCode',
        'season_zero_display_name': 'SeasonZeroDisplayName',
        'metadata_savers': 'MetadataSavers',
        'disabled_local_metadata_readers': 'DisabledLocalMetadataReaders',
        'local_metadata_reader_order': 'LocalMetadataReaderOrder',
        'disabled_subtitle_fetchers': 'DisabledSubtitleFetchers',
        'subtitle_fetcher_order': 'SubtitleFetcherOrder',
        'skip_subtitles_if_embedded_subtitles_present': 'SkipSubtitlesIfEmbeddedSubtitlesPresent',
        'skip_subtitles_if_audio_track_matches': 'SkipSubtitlesIfAudioTrackMatches',
        'subtitle_download_languages': 'SubtitleDownloadLanguages',
        'require_perfect_subtitle_match': 'RequirePerfectSubtitleMatch',
        'save_subtitles_with_media': 'SaveSubtitlesWithMedia',
        'forced_subtitles_only': 'ForcedSubtitlesOnly',
        'type_options': 'TypeOptions',
        'collapse_single_item_folders': 'CollapseSingleItemFolders',
        'min_resume_pct': 'MinResumePct',
        'max_resume_pct': 'MaxResumePct',
        'min_resume_duration_seconds': 'MinResumeDurationSeconds',
        'thumbnail_images_interval_seconds': 'ThumbnailImagesIntervalSeconds'
    }

    def __init__(self, enable_archive_media_files=None, enable_photos=None, enable_realtime_monitor=None, enable_chapter_image_extraction=None, extract_chapter_images_during_library_scan=None, download_images_in_advance=None, path_infos=None, save_local_metadata=None, save_local_thumbnail_sets=None, import_missing_episodes=None, enable_automatic_series_grouping=None, enable_embedded_titles=None, enable_audio_resume=None, automatic_refresh_interval_days=None, preferred_metadata_language=None, content_type=None, metadata_country_code=None, season_zero_display_name=None, metadata_savers=None, disabled_local_metadata_readers=None, local_metadata_reader_order=None, disabled_subtitle_fetchers=None, subtitle_fetcher_order=None, skip_subtitles_if_embedded_subtitles_present=None, skip_subtitles_if_audio_track_matches=None, subtitle_download_languages=None, require_perfect_subtitle_match=None, save_subtitles_with_media=None, forced_subtitles_only=None, type_options=None, collapse_single_item_folders=None, min_resume_pct=None, max_resume_pct=None, min_resume_duration_seconds=None, thumbnail_images_interval_seconds=None):  # noqa: E501
        """ConfigurationLibraryOptions - a model defined in Swagger"""  # noqa: E501
        self._enable_archive_media_files = None
        self._enable_photos = None
        self._enable_realtime_monitor = None
        self._enable_chapter_image_extraction = None
        self._extract_chapter_images_during_library_scan = None
        self._download_images_in_advance = None
        self._path_infos = None
        self._save_local_metadata = None
        self._save_local_thumbnail_sets = None
        self._import_missing_episodes = None
        self._enable_automatic_series_grouping = None
        self._enable_embedded_titles = None
        self._enable_audio_resume = None
        self._automatic_refresh_interval_days = None
        self._preferred_metadata_language = None
        self._content_type = None
        self._metadata_country_code = None
        self._season_zero_display_name = None
        self._metadata_savers = None
        self._disabled_local_metadata_readers = None
        self._local_metadata_reader_order = None
        self._disabled_subtitle_fetchers = None
        self._subtitle_fetcher_order = None
        self._skip_subtitles_if_embedded_subtitles_present = None
        self._skip_subtitles_if_audio_track_matches = None
        self._subtitle_download_languages = None
        self._require_perfect_subtitle_match = None
        self._save_subtitles_with_media = None
        self._forced_subtitles_only = None
        self._type_options = None
        self._collapse_single_item_folders = None
        self._min_resume_pct = None
        self._max_resume_pct = None
        self._min_resume_duration_seconds = None
        self._thumbnail_images_interval_seconds = None
        self.discriminator = None
        if enable_archive_media_files is not None:
            self.enable_archive_media_files = enable_archive_media_files
        if enable_photos is not None:
            self.enable_photos = enable_photos
        if enable_realtime_monitor is not None:
            self.enable_realtime_monitor = enable_realtime_monitor
        if enable_chapter_image_extraction is not None:
            self.enable_chapter_image_extraction = enable_chapter_image_extraction
        if extract_chapter_images_during_library_scan is not None:
            self.extract_chapter_images_during_library_scan = extract_chapter_images_during_library_scan
        if download_images_in_advance is not None:
            self.download_images_in_advance = download_images_in_advance
        if path_infos is not None:
            self.path_infos = path_infos
        if save_local_metadata is not None:
            self.save_local_metadata = save_local_metadata
        if save_local_thumbnail_sets is not None:
            self.save_local_thumbnail_sets = save_local_thumbnail_sets
        if import_missing_episodes is not None:
            self.import_missing_episodes = import_missing_episodes
        if enable_automatic_series_grouping is not None:
            self.enable_automatic_series_grouping = enable_automatic_series_grouping
        if enable_embedded_titles is not None:
            self.enable_embedded_titles = enable_embedded_titles
        if enable_audio_resume is not None:
            self.enable_audio_resume = enable_audio_resume
        if automatic_refresh_interval_days is not None:
            self.automatic_refresh_interval_days = automatic_refresh_interval_days
        if preferred_metadata_language is not None:
            self.preferred_metadata_language = preferred_metadata_language
        if content_type is not None:
            self.content_type = content_type
        if metadata_country_code is not None:
            self.metadata_country_code = metadata_country_code
        if season_zero_display_name is not None:
            self.season_zero_display_name = season_zero_display_name
        if metadata_savers is not None:
            self.metadata_savers = metadata_savers
        if disabled_local_metadata_readers is not None:
            self.disabled_local_metadata_readers = disabled_local_metadata_readers
        if local_metadata_reader_order is not None:
            self.local_metadata_reader_order = local_metadata_reader_order
        if disabled_subtitle_fetchers is not None:
            self.disabled_subtitle_fetchers = disabled_subtitle_fetchers
        if subtitle_fetcher_order is not None:
            self.subtitle_fetcher_order = subtitle_fetcher_order
        if skip_subtitles_if_embedded_subtitles_present is not None:
            self.skip_subtitles_if_embedded_subtitles_present = skip_subtitles_if_embedded_subtitles_present
        if skip_subtitles_if_audio_track_matches is not None:
            self.skip_subtitles_if_audio_track_matches = skip_subtitles_if_audio_track_matches
        if subtitle_download_languages is not None:
            self.subtitle_download_languages = subtitle_download_languages
        if require_perfect_subtitle_match is not None:
            self.require_perfect_subtitle_match = require_perfect_subtitle_match
        if save_subtitles_with_media is not None:
            self.save_subtitles_with_media = save_subtitles_with_media
        if forced_subtitles_only is not None:
            self.forced_subtitles_only = forced_subtitles_only
        if type_options is not None:
            self.type_options = type_options
        if collapse_single_item_folders is not None:
            self.collapse_single_item_folders = collapse_single_item_folders
        if min_resume_pct is not None:
            self.min_resume_pct = min_resume_pct
        if max_resume_pct is not None:
            self.max_resume_pct = max_resume_pct
        if min_resume_duration_seconds is not None:
            self.min_resume_duration_seconds = min_resume_duration_seconds
        if thumbnail_images_interval_seconds is not None:
            self.thumbnail_images_interval_seconds = thumbnail_images_interval_seconds

    @property
    def enable_archive_media_files(self):
        """Gets the enable_archive_media_files of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The enable_archive_media_files of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_archive_media_files

    @enable_archive_media_files.setter
    def enable_archive_media_files(self, enable_archive_media_files):
        """Sets the enable_archive_media_files of this ConfigurationLibraryOptions.


        :param enable_archive_media_files: The enable_archive_media_files of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_archive_media_files = enable_archive_media_files

    @property
    def enable_photos(self):
        """Gets the enable_photos of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The enable_photos of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_photos

    @enable_photos.setter
    def enable_photos(self, enable_photos):
        """Sets the enable_photos of this ConfigurationLibraryOptions.


        :param enable_photos: The enable_photos of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_photos = enable_photos

    @property
    def enable_realtime_monitor(self):
        """Gets the enable_realtime_monitor of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The enable_realtime_monitor of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_realtime_monitor

    @enable_realtime_monitor.setter
    def enable_realtime_monitor(self, enable_realtime_monitor):
        """Sets the enable_realtime_monitor of this ConfigurationLibraryOptions.


        :param enable_realtime_monitor: The enable_realtime_monitor of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_realtime_monitor = enable_realtime_monitor

    @property
    def enable_chapter_image_extraction(self):
        """Gets the enable_chapter_image_extraction of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The enable_chapter_image_extraction of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_chapter_image_extraction

    @enable_chapter_image_extraction.setter
    def enable_chapter_image_extraction(self, enable_chapter_image_extraction):
        """Sets the enable_chapter_image_extraction of this ConfigurationLibraryOptions.


        :param enable_chapter_image_extraction: The enable_chapter_image_extraction of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_chapter_image_extraction = enable_chapter_image_extraction

    @property
    def extract_chapter_images_during_library_scan(self):
        """Gets the extract_chapter_images_during_library_scan of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The extract_chapter_images_during_library_scan of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._extract_chapter_images_during_library_scan

    @extract_chapter_images_during_library_scan.setter
    def extract_chapter_images_during_library_scan(self, extract_chapter_images_during_library_scan):
        """Sets the extract_chapter_images_during_library_scan of this ConfigurationLibraryOptions.


        :param extract_chapter_images_during_library_scan: The extract_chapter_images_during_library_scan of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._extract_chapter_images_during_library_scan = extract_chapter_images_during_library_scan

    @property
    def download_images_in_advance(self):
        """Gets the download_images_in_advance of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The download_images_in_advance of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._download_images_in_advance

    @download_images_in_advance.setter
    def download_images_in_advance(self, download_images_in_advance):
        """Sets the download_images_in_advance of this ConfigurationLibraryOptions.


        :param download_images_in_advance: The download_images_in_advance of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._download_images_in_advance = download_images_in_advance

    @property
    def path_infos(self):
        """Gets the path_infos of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The path_infos of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: list[ConfigurationMediaPathInfo]
        """
        return self._path_infos

    @path_infos.setter
    def path_infos(self, path_infos):
        """Sets the path_infos of this ConfigurationLibraryOptions.


        :param path_infos: The path_infos of this ConfigurationLibraryOptions.  # noqa: E501
        :type: list[ConfigurationMediaPathInfo]
        """

        self._path_infos = path_infos

    @property
    def save_local_metadata(self):
        """Gets the save_local_metadata of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The save_local_metadata of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._save_local_metadata

    @save_local_metadata.setter
    def save_local_metadata(self, save_local_metadata):
        """Sets the save_local_metadata of this ConfigurationLibraryOptions.


        :param save_local_metadata: The save_local_metadata of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._save_local_metadata = save_local_metadata

    @property
    def save_local_thumbnail_sets(self):
        """Gets the save_local_thumbnail_sets of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The save_local_thumbnail_sets of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._save_local_thumbnail_sets

    @save_local_thumbnail_sets.setter
    def save_local_thumbnail_sets(self, save_local_thumbnail_sets):
        """Sets the save_local_thumbnail_sets of this ConfigurationLibraryOptions.


        :param save_local_thumbnail_sets: The save_local_thumbnail_sets of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._save_local_thumbnail_sets = save_local_thumbnail_sets

    @property
    def import_missing_episodes(self):
        """Gets the import_missing_episodes of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The import_missing_episodes of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._import_missing_episodes

    @import_missing_episodes.setter
    def import_missing_episodes(self, import_missing_episodes):
        """Sets the import_missing_episodes of this ConfigurationLibraryOptions.


        :param import_missing_episodes: The import_missing_episodes of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._import_missing_episodes = import_missing_episodes

    @property
    def enable_automatic_series_grouping(self):
        """Gets the enable_automatic_series_grouping of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The enable_automatic_series_grouping of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_automatic_series_grouping

    @enable_automatic_series_grouping.setter
    def enable_automatic_series_grouping(self, enable_automatic_series_grouping):
        """Sets the enable_automatic_series_grouping of this ConfigurationLibraryOptions.


        :param enable_automatic_series_grouping: The enable_automatic_series_grouping of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_automatic_series_grouping = enable_automatic_series_grouping

    @property
    def enable_embedded_titles(self):
        """Gets the enable_embedded_titles of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The enable_embedded_titles of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_embedded_titles

    @enable_embedded_titles.setter
    def enable_embedded_titles(self, enable_embedded_titles):
        """Sets the enable_embedded_titles of this ConfigurationLibraryOptions.


        :param enable_embedded_titles: The enable_embedded_titles of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_embedded_titles = enable_embedded_titles

    @property
    def enable_audio_resume(self):
        """Gets the enable_audio_resume of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The enable_audio_resume of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_audio_resume

    @enable_audio_resume.setter
    def enable_audio_resume(self, enable_audio_resume):
        """Sets the enable_audio_resume of this ConfigurationLibraryOptions.


        :param enable_audio_resume: The enable_audio_resume of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._enable_audio_resume = enable_audio_resume

    @property
    def automatic_refresh_interval_days(self):
        """Gets the automatic_refresh_interval_days of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The automatic_refresh_interval_days of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._automatic_refresh_interval_days

    @automatic_refresh_interval_days.setter
    def automatic_refresh_interval_days(self, automatic_refresh_interval_days):
        """Sets the automatic_refresh_interval_days of this ConfigurationLibraryOptions.


        :param automatic_refresh_interval_days: The automatic_refresh_interval_days of this ConfigurationLibraryOptions.  # noqa: E501
        :type: int
        """

        self._automatic_refresh_interval_days = automatic_refresh_interval_days

    @property
    def preferred_metadata_language(self):
        """Gets the preferred_metadata_language of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The preferred_metadata_language of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: str
        """
        return self._preferred_metadata_language

    @preferred_metadata_language.setter
    def preferred_metadata_language(self, preferred_metadata_language):
        """Sets the preferred_metadata_language of this ConfigurationLibraryOptions.


        :param preferred_metadata_language: The preferred_metadata_language of this ConfigurationLibraryOptions.  # noqa: E501
        :type: str
        """

        self._preferred_metadata_language = preferred_metadata_language

    @property
    def content_type(self):
        """Gets the content_type of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The content_type of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ConfigurationLibraryOptions.


        :param content_type: The content_type of this ConfigurationLibraryOptions.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def metadata_country_code(self):
        """Gets the metadata_country_code of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The metadata_country_code of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: str
        """
        return self._metadata_country_code

    @metadata_country_code.setter
    def metadata_country_code(self, metadata_country_code):
        """Sets the metadata_country_code of this ConfigurationLibraryOptions.


        :param metadata_country_code: The metadata_country_code of this ConfigurationLibraryOptions.  # noqa: E501
        :type: str
        """

        self._metadata_country_code = metadata_country_code

    @property
    def season_zero_display_name(self):
        """Gets the season_zero_display_name of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The season_zero_display_name of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: str
        """
        return self._season_zero_display_name

    @season_zero_display_name.setter
    def season_zero_display_name(self, season_zero_display_name):
        """Sets the season_zero_display_name of this ConfigurationLibraryOptions.


        :param season_zero_display_name: The season_zero_display_name of this ConfigurationLibraryOptions.  # noqa: E501
        :type: str
        """

        self._season_zero_display_name = season_zero_display_name

    @property
    def metadata_savers(self):
        """Gets the metadata_savers of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The metadata_savers of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._metadata_savers

    @metadata_savers.setter
    def metadata_savers(self, metadata_savers):
        """Sets the metadata_savers of this ConfigurationLibraryOptions.


        :param metadata_savers: The metadata_savers of this ConfigurationLibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._metadata_savers = metadata_savers

    @property
    def disabled_local_metadata_readers(self):
        """Gets the disabled_local_metadata_readers of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The disabled_local_metadata_readers of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._disabled_local_metadata_readers

    @disabled_local_metadata_readers.setter
    def disabled_local_metadata_readers(self, disabled_local_metadata_readers):
        """Sets the disabled_local_metadata_readers of this ConfigurationLibraryOptions.


        :param disabled_local_metadata_readers: The disabled_local_metadata_readers of this ConfigurationLibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._disabled_local_metadata_readers = disabled_local_metadata_readers

    @property
    def local_metadata_reader_order(self):
        """Gets the local_metadata_reader_order of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The local_metadata_reader_order of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._local_metadata_reader_order

    @local_metadata_reader_order.setter
    def local_metadata_reader_order(self, local_metadata_reader_order):
        """Sets the local_metadata_reader_order of this ConfigurationLibraryOptions.


        :param local_metadata_reader_order: The local_metadata_reader_order of this ConfigurationLibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._local_metadata_reader_order = local_metadata_reader_order

    @property
    def disabled_subtitle_fetchers(self):
        """Gets the disabled_subtitle_fetchers of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The disabled_subtitle_fetchers of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._disabled_subtitle_fetchers

    @disabled_subtitle_fetchers.setter
    def disabled_subtitle_fetchers(self, disabled_subtitle_fetchers):
        """Sets the disabled_subtitle_fetchers of this ConfigurationLibraryOptions.


        :param disabled_subtitle_fetchers: The disabled_subtitle_fetchers of this ConfigurationLibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._disabled_subtitle_fetchers = disabled_subtitle_fetchers

    @property
    def subtitle_fetcher_order(self):
        """Gets the subtitle_fetcher_order of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The subtitle_fetcher_order of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._subtitle_fetcher_order

    @subtitle_fetcher_order.setter
    def subtitle_fetcher_order(self, subtitle_fetcher_order):
        """Sets the subtitle_fetcher_order of this ConfigurationLibraryOptions.


        :param subtitle_fetcher_order: The subtitle_fetcher_order of this ConfigurationLibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._subtitle_fetcher_order = subtitle_fetcher_order

    @property
    def skip_subtitles_if_embedded_subtitles_present(self):
        """Gets the skip_subtitles_if_embedded_subtitles_present of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The skip_subtitles_if_embedded_subtitles_present of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._skip_subtitles_if_embedded_subtitles_present

    @skip_subtitles_if_embedded_subtitles_present.setter
    def skip_subtitles_if_embedded_subtitles_present(self, skip_subtitles_if_embedded_subtitles_present):
        """Sets the skip_subtitles_if_embedded_subtitles_present of this ConfigurationLibraryOptions.


        :param skip_subtitles_if_embedded_subtitles_present: The skip_subtitles_if_embedded_subtitles_present of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._skip_subtitles_if_embedded_subtitles_present = skip_subtitles_if_embedded_subtitles_present

    @property
    def skip_subtitles_if_audio_track_matches(self):
        """Gets the skip_subtitles_if_audio_track_matches of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The skip_subtitles_if_audio_track_matches of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._skip_subtitles_if_audio_track_matches

    @skip_subtitles_if_audio_track_matches.setter
    def skip_subtitles_if_audio_track_matches(self, skip_subtitles_if_audio_track_matches):
        """Sets the skip_subtitles_if_audio_track_matches of this ConfigurationLibraryOptions.


        :param skip_subtitles_if_audio_track_matches: The skip_subtitles_if_audio_track_matches of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._skip_subtitles_if_audio_track_matches = skip_subtitles_if_audio_track_matches

    @property
    def subtitle_download_languages(self):
        """Gets the subtitle_download_languages of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The subtitle_download_languages of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._subtitle_download_languages

    @subtitle_download_languages.setter
    def subtitle_download_languages(self, subtitle_download_languages):
        """Sets the subtitle_download_languages of this ConfigurationLibraryOptions.


        :param subtitle_download_languages: The subtitle_download_languages of this ConfigurationLibraryOptions.  # noqa: E501
        :type: list[str]
        """

        self._subtitle_download_languages = subtitle_download_languages

    @property
    def require_perfect_subtitle_match(self):
        """Gets the require_perfect_subtitle_match of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The require_perfect_subtitle_match of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._require_perfect_subtitle_match

    @require_perfect_subtitle_match.setter
    def require_perfect_subtitle_match(self, require_perfect_subtitle_match):
        """Sets the require_perfect_subtitle_match of this ConfigurationLibraryOptions.


        :param require_perfect_subtitle_match: The require_perfect_subtitle_match of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._require_perfect_subtitle_match = require_perfect_subtitle_match

    @property
    def save_subtitles_with_media(self):
        """Gets the save_subtitles_with_media of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The save_subtitles_with_media of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._save_subtitles_with_media

    @save_subtitles_with_media.setter
    def save_subtitles_with_media(self, save_subtitles_with_media):
        """Sets the save_subtitles_with_media of this ConfigurationLibraryOptions.


        :param save_subtitles_with_media: The save_subtitles_with_media of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._save_subtitles_with_media = save_subtitles_with_media

    @property
    def forced_subtitles_only(self):
        """Gets the forced_subtitles_only of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The forced_subtitles_only of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._forced_subtitles_only

    @forced_subtitles_only.setter
    def forced_subtitles_only(self, forced_subtitles_only):
        """Sets the forced_subtitles_only of this ConfigurationLibraryOptions.


        :param forced_subtitles_only: The forced_subtitles_only of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._forced_subtitles_only = forced_subtitles_only

    @property
    def type_options(self):
        """Gets the type_options of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The type_options of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: list[ConfigurationTypeOptions]
        """
        return self._type_options

    @type_options.setter
    def type_options(self, type_options):
        """Sets the type_options of this ConfigurationLibraryOptions.


        :param type_options: The type_options of this ConfigurationLibraryOptions.  # noqa: E501
        :type: list[ConfigurationTypeOptions]
        """

        self._type_options = type_options

    @property
    def collapse_single_item_folders(self):
        """Gets the collapse_single_item_folders of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The collapse_single_item_folders of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: bool
        """
        return self._collapse_single_item_folders

    @collapse_single_item_folders.setter
    def collapse_single_item_folders(self, collapse_single_item_folders):
        """Sets the collapse_single_item_folders of this ConfigurationLibraryOptions.


        :param collapse_single_item_folders: The collapse_single_item_folders of this ConfigurationLibraryOptions.  # noqa: E501
        :type: bool
        """

        self._collapse_single_item_folders = collapse_single_item_folders

    @property
    def min_resume_pct(self):
        """Gets the min_resume_pct of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The min_resume_pct of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._min_resume_pct

    @min_resume_pct.setter
    def min_resume_pct(self, min_resume_pct):
        """Sets the min_resume_pct of this ConfigurationLibraryOptions.


        :param min_resume_pct: The min_resume_pct of this ConfigurationLibraryOptions.  # noqa: E501
        :type: int
        """

        self._min_resume_pct = min_resume_pct

    @property
    def max_resume_pct(self):
        """Gets the max_resume_pct of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The max_resume_pct of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._max_resume_pct

    @max_resume_pct.setter
    def max_resume_pct(self, max_resume_pct):
        """Sets the max_resume_pct of this ConfigurationLibraryOptions.


        :param max_resume_pct: The max_resume_pct of this ConfigurationLibraryOptions.  # noqa: E501
        :type: int
        """

        self._max_resume_pct = max_resume_pct

    @property
    def min_resume_duration_seconds(self):
        """Gets the min_resume_duration_seconds of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The min_resume_duration_seconds of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._min_resume_duration_seconds

    @min_resume_duration_seconds.setter
    def min_resume_duration_seconds(self, min_resume_duration_seconds):
        """Sets the min_resume_duration_seconds of this ConfigurationLibraryOptions.


        :param min_resume_duration_seconds: The min_resume_duration_seconds of this ConfigurationLibraryOptions.  # noqa: E501
        :type: int
        """

        self._min_resume_duration_seconds = min_resume_duration_seconds

    @property
    def thumbnail_images_interval_seconds(self):
        """Gets the thumbnail_images_interval_seconds of this ConfigurationLibraryOptions.  # noqa: E501


        :return: The thumbnail_images_interval_seconds of this ConfigurationLibraryOptions.  # noqa: E501
        :rtype: int
        """
        return self._thumbnail_images_interval_seconds

    @thumbnail_images_interval_seconds.setter
    def thumbnail_images_interval_seconds(self, thumbnail_images_interval_seconds):
        """Sets the thumbnail_images_interval_seconds of this ConfigurationLibraryOptions.


        :param thumbnail_images_interval_seconds: The thumbnail_images_interval_seconds of this ConfigurationLibraryOptions.  # noqa: E501
        :type: int
        """

        self._thumbnail_images_interval_seconds = thumbnail_images_interval_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigurationLibraryOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationLibraryOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
