# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.7.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmartPlaylistContractsSmartPlaylistInfoDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_duration_str': 'str',
        'items': 'list[str]',
        'rule_count': 'int',
        'id': 'str',
        'name': 'str',
        'rules_tree': 'list[SmartPlaylistContractsRuleTreeNodeDto]',
        'user_id': 'str',
        'limit': 'SmartPlaylistContractsSmartPlaylistLimitDto',
        'new_item_order': 'SmartPlaylistContractsSmartPlaylistNewItemOrderDto',
        'last_shuffle_update': 'datetime',
        'last_updated': 'datetime',
        'last_sync': 'datetime',
        'update_type': 'str',
        'smart_type': 'str',
        'internal_id': 'int',
        'original_smart_type': 'str',
        'force_create': 'bool',
        'collection_mode': 'str',
        'sync_count': 'int',
        'last_sync_duration': 'int',
        'status': 'str',
        'enabled': 'bool',
        'source_type': 'str',
        'source': 'SmartPlaylistContractsSourceDto',
        'sort_job': 'SmartPlaylistContractsSortJobDto'
    }

    attribute_map = {
        'last_duration_str': 'LastDurationStr',
        'items': 'Items',
        'rule_count': 'RuleCount',
        'id': 'Id',
        'name': 'Name',
        'rules_tree': 'RulesTree',
        'user_id': 'UserId',
        'limit': 'Limit',
        'new_item_order': 'NewItemOrder',
        'last_shuffle_update': 'LastShuffleUpdate',
        'last_updated': 'LastUpdated',
        'last_sync': 'LastSync',
        'update_type': 'UpdateType',
        'smart_type': 'SmartType',
        'internal_id': 'InternalId',
        'original_smart_type': 'OriginalSmartType',
        'force_create': 'ForceCreate',
        'collection_mode': 'CollectionMode',
        'sync_count': 'SyncCount',
        'last_sync_duration': 'LastSyncDuration',
        'status': 'Status',
        'enabled': 'Enabled',
        'source_type': 'SourceType',
        'source': 'Source',
        'sort_job': 'SortJob'
    }

    def __init__(self, last_duration_str=None, items=None, rule_count=None, id=None, name=None, rules_tree=None, user_id=None, limit=None, new_item_order=None, last_shuffle_update=None, last_updated=None, last_sync=None, update_type=None, smart_type=None, internal_id=None, original_smart_type=None, force_create=None, collection_mode=None, sync_count=None, last_sync_duration=None, status=None, enabled=None, source_type=None, source=None, sort_job=None):  # noqa: E501
        """SmartPlaylistContractsSmartPlaylistInfoDto - a model defined in Swagger"""  # noqa: E501
        self._last_duration_str = None
        self._items = None
        self._rule_count = None
        self._id = None
        self._name = None
        self._rules_tree = None
        self._user_id = None
        self._limit = None
        self._new_item_order = None
        self._last_shuffle_update = None
        self._last_updated = None
        self._last_sync = None
        self._update_type = None
        self._smart_type = None
        self._internal_id = None
        self._original_smart_type = None
        self._force_create = None
        self._collection_mode = None
        self._sync_count = None
        self._last_sync_duration = None
        self._status = None
        self._enabled = None
        self._source_type = None
        self._source = None
        self._sort_job = None
        self.discriminator = None
        if last_duration_str is not None:
            self.last_duration_str = last_duration_str
        if items is not None:
            self.items = items
        if rule_count is not None:
            self.rule_count = rule_count
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if rules_tree is not None:
            self.rules_tree = rules_tree
        if user_id is not None:
            self.user_id = user_id
        if limit is not None:
            self.limit = limit
        if new_item_order is not None:
            self.new_item_order = new_item_order
        if last_shuffle_update is not None:
            self.last_shuffle_update = last_shuffle_update
        if last_updated is not None:
            self.last_updated = last_updated
        if last_sync is not None:
            self.last_sync = last_sync
        if update_type is not None:
            self.update_type = update_type
        if smart_type is not None:
            self.smart_type = smart_type
        if internal_id is not None:
            self.internal_id = internal_id
        if original_smart_type is not None:
            self.original_smart_type = original_smart_type
        if force_create is not None:
            self.force_create = force_create
        if collection_mode is not None:
            self.collection_mode = collection_mode
        if sync_count is not None:
            self.sync_count = sync_count
        if last_sync_duration is not None:
            self.last_sync_duration = last_sync_duration
        if status is not None:
            self.status = status
        if enabled is not None:
            self.enabled = enabled
        if source_type is not None:
            self.source_type = source_type
        if source is not None:
            self.source = source
        if sort_job is not None:
            self.sort_job = sort_job

    @property
    def last_duration_str(self):
        """Gets the last_duration_str of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The last_duration_str of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._last_duration_str

    @last_duration_str.setter
    def last_duration_str(self, last_duration_str):
        """Sets the last_duration_str of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param last_duration_str: The last_duration_str of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._last_duration_str = last_duration_str

    @property
    def items(self):
        """Gets the items of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The items of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param items: The items of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: list[str]
        """

        self._items = items

    @property
    def rule_count(self):
        """Gets the rule_count of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The rule_count of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: int
        """
        return self._rule_count

    @rule_count.setter
    def rule_count(self, rule_count):
        """Sets the rule_count of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param rule_count: The rule_count of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: int
        """

        self._rule_count = rule_count

    @property
    def id(self):
        """Gets the id of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The id of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param id: The id of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The name of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param name: The name of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rules_tree(self):
        """Gets the rules_tree of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The rules_tree of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: list[SmartPlaylistContractsRuleTreeNodeDto]
        """
        return self._rules_tree

    @rules_tree.setter
    def rules_tree(self, rules_tree):
        """Sets the rules_tree of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param rules_tree: The rules_tree of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: list[SmartPlaylistContractsRuleTreeNodeDto]
        """

        self._rules_tree = rules_tree

    @property
    def user_id(self):
        """Gets the user_id of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The user_id of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param user_id: The user_id of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def limit(self):
        """Gets the limit of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The limit of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: SmartPlaylistContractsSmartPlaylistLimitDto
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param limit: The limit of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: SmartPlaylistContractsSmartPlaylistLimitDto
        """

        self._limit = limit

    @property
    def new_item_order(self):
        """Gets the new_item_order of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The new_item_order of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: SmartPlaylistContractsSmartPlaylistNewItemOrderDto
        """
        return self._new_item_order

    @new_item_order.setter
    def new_item_order(self, new_item_order):
        """Sets the new_item_order of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param new_item_order: The new_item_order of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: SmartPlaylistContractsSmartPlaylistNewItemOrderDto
        """

        self._new_item_order = new_item_order

    @property
    def last_shuffle_update(self):
        """Gets the last_shuffle_update of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The last_shuffle_update of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_shuffle_update

    @last_shuffle_update.setter
    def last_shuffle_update(self, last_shuffle_update):
        """Sets the last_shuffle_update of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param last_shuffle_update: The last_shuffle_update of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: datetime
        """

        self._last_shuffle_update = last_shuffle_update

    @property
    def last_updated(self):
        """Gets the last_updated of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The last_updated of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param last_updated: The last_updated of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def last_sync(self):
        """Gets the last_sync of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The last_sync of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param last_sync: The last_sync of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: datetime
        """

        self._last_sync = last_sync

    @property
    def update_type(self):
        """Gets the update_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The update_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param update_type: The update_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._update_type = update_type

    @property
    def smart_type(self):
        """Gets the smart_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The smart_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._smart_type

    @smart_type.setter
    def smart_type(self, smart_type):
        """Sets the smart_type of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param smart_type: The smart_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._smart_type = smart_type

    @property
    def internal_id(self):
        """Gets the internal_id of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The internal_id of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: int
        """
        return self._internal_id

    @internal_id.setter
    def internal_id(self, internal_id):
        """Sets the internal_id of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param internal_id: The internal_id of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: int
        """

        self._internal_id = internal_id

    @property
    def original_smart_type(self):
        """Gets the original_smart_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The original_smart_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._original_smart_type

    @original_smart_type.setter
    def original_smart_type(self, original_smart_type):
        """Sets the original_smart_type of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param original_smart_type: The original_smart_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._original_smart_type = original_smart_type

    @property
    def force_create(self):
        """Gets the force_create of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The force_create of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: bool
        """
        return self._force_create

    @force_create.setter
    def force_create(self, force_create):
        """Sets the force_create of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param force_create: The force_create of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: bool
        """

        self._force_create = force_create

    @property
    def collection_mode(self):
        """Gets the collection_mode of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The collection_mode of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._collection_mode

    @collection_mode.setter
    def collection_mode(self, collection_mode):
        """Sets the collection_mode of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param collection_mode: The collection_mode of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._collection_mode = collection_mode

    @property
    def sync_count(self):
        """Gets the sync_count of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The sync_count of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: int
        """
        return self._sync_count

    @sync_count.setter
    def sync_count(self, sync_count):
        """Sets the sync_count of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param sync_count: The sync_count of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: int
        """

        self._sync_count = sync_count

    @property
    def last_sync_duration(self):
        """Gets the last_sync_duration of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The last_sync_duration of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_duration

    @last_sync_duration.setter
    def last_sync_duration(self, last_sync_duration):
        """Sets the last_sync_duration of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param last_sync_duration: The last_sync_duration of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: int
        """

        self._last_sync_duration = last_sync_duration

    @property
    def status(self):
        """Gets the status of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The status of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param status: The status of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def enabled(self):
        """Gets the enabled of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The enabled of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param enabled: The enabled of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def source_type(self):
        """Gets the source_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The source_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param source_type: The source_type of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def source(self):
        """Gets the source of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The source of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: SmartPlaylistContractsSourceDto
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param source: The source of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: SmartPlaylistContractsSourceDto
        """

        self._source = source

    @property
    def sort_job(self):
        """Gets the sort_job of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501


        :return: The sort_job of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :rtype: SmartPlaylistContractsSortJobDto
        """
        return self._sort_job

    @sort_job.setter
    def sort_job(self, sort_job):
        """Sets the sort_job of this SmartPlaylistContractsSmartPlaylistInfoDto.


        :param sort_job: The sort_job of this SmartPlaylistContractsSmartPlaylistInfoDto.  # noqa: E501
        :type: SmartPlaylistContractsSortJobDto
        """

        self._sort_job = sort_job

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlaylistContractsSmartPlaylistInfoDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlaylistContractsSmartPlaylistInfoDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
