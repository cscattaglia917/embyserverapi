# coding: utf-8

"""
    Emby Server API

    Explore the Emby Server API  # noqa: E501

    OpenAPI spec version: 4.7.2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SmartPlaylistContractsSortJobDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'update_type': 'str',
        'order_by': 'str',
        'sync_count': 'int',
        'last_sync_duration': 'int',
        'status': 'str',
        'next_update': 'datetime',
        'last_updated': 'datetime',
        'last_ran': 'datetime',
        'last_duration_str': 'str'
    }

    attribute_map = {
        'enabled': 'Enabled',
        'update_type': 'UpdateType',
        'order_by': 'OrderBy',
        'sync_count': 'SyncCount',
        'last_sync_duration': 'LastSyncDuration',
        'status': 'Status',
        'next_update': 'NextUpdate',
        'last_updated': 'LastUpdated',
        'last_ran': 'LastRan',
        'last_duration_str': 'LastDurationStr'
    }

    def __init__(self, enabled=None, update_type=None, order_by=None, sync_count=None, last_sync_duration=None, status=None, next_update=None, last_updated=None, last_ran=None, last_duration_str=None):  # noqa: E501
        """SmartPlaylistContractsSortJobDto - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._update_type = None
        self._order_by = None
        self._sync_count = None
        self._last_sync_duration = None
        self._status = None
        self._next_update = None
        self._last_updated = None
        self._last_ran = None
        self._last_duration_str = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if update_type is not None:
            self.update_type = update_type
        if order_by is not None:
            self.order_by = order_by
        if sync_count is not None:
            self.sync_count = sync_count
        if last_sync_duration is not None:
            self.last_sync_duration = last_sync_duration
        if status is not None:
            self.status = status
        if next_update is not None:
            self.next_update = next_update
        if last_updated is not None:
            self.last_updated = last_updated
        if last_ran is not None:
            self.last_ran = last_ran
        if last_duration_str is not None:
            self.last_duration_str = last_duration_str

    @property
    def enabled(self):
        """Gets the enabled of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The enabled of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SmartPlaylistContractsSortJobDto.


        :param enabled: The enabled of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def update_type(self):
        """Gets the update_type of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The update_type of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: str
        """
        return self._update_type

    @update_type.setter
    def update_type(self, update_type):
        """Sets the update_type of this SmartPlaylistContractsSortJobDto.


        :param update_type: The update_type of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: str
        """

        self._update_type = update_type

    @property
    def order_by(self):
        """Gets the order_by of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The order_by of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this SmartPlaylistContractsSortJobDto.


        :param order_by: The order_by of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: str
        """

        self._order_by = order_by

    @property
    def sync_count(self):
        """Gets the sync_count of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The sync_count of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: int
        """
        return self._sync_count

    @sync_count.setter
    def sync_count(self, sync_count):
        """Sets the sync_count of this SmartPlaylistContractsSortJobDto.


        :param sync_count: The sync_count of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: int
        """

        self._sync_count = sync_count

    @property
    def last_sync_duration(self):
        """Gets the last_sync_duration of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The last_sync_duration of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_duration

    @last_sync_duration.setter
    def last_sync_duration(self, last_sync_duration):
        """Sets the last_sync_duration of this SmartPlaylistContractsSortJobDto.


        :param last_sync_duration: The last_sync_duration of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: int
        """

        self._last_sync_duration = last_sync_duration

    @property
    def status(self):
        """Gets the status of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The status of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SmartPlaylistContractsSortJobDto.


        :param status: The status of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def next_update(self):
        """Gets the next_update of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The next_update of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: datetime
        """
        return self._next_update

    @next_update.setter
    def next_update(self, next_update):
        """Sets the next_update of this SmartPlaylistContractsSortJobDto.


        :param next_update: The next_update of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: datetime
        """

        self._next_update = next_update

    @property
    def last_updated(self):
        """Gets the last_updated of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The last_updated of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this SmartPlaylistContractsSortJobDto.


        :param last_updated: The last_updated of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def last_ran(self):
        """Gets the last_ran of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The last_ran of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: datetime
        """
        return self._last_ran

    @last_ran.setter
    def last_ran(self, last_ran):
        """Sets the last_ran of this SmartPlaylistContractsSortJobDto.


        :param last_ran: The last_ran of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: datetime
        """

        self._last_ran = last_ran

    @property
    def last_duration_str(self):
        """Gets the last_duration_str of this SmartPlaylistContractsSortJobDto.  # noqa: E501


        :return: The last_duration_str of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :rtype: str
        """
        return self._last_duration_str

    @last_duration_str.setter
    def last_duration_str(self, last_duration_str):
        """Sets the last_duration_str of this SmartPlaylistContractsSortJobDto.


        :param last_duration_str: The last_duration_str of this SmartPlaylistContractsSortJobDto.  # noqa: E501
        :type: str
        """

        self._last_duration_str = last_duration_str

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SmartPlaylistContractsSortJobDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SmartPlaylistContractsSortJobDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
